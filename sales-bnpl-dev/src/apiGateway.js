!function(e,t){for(var n in t)e[n]=t[n]}(window,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=27)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(31);n(32);var o=n(33),i=function(){this.encryption=new Encryption,this.aesEncryption=new r.AESEncryption(this.encryption.cryptoJs),this.rsaEncryption=new o.RSAEncryption(this.encryption.jsEncrypt)};t.Security=i},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(11),s=n(3),u=n(2),c=n(7),l=function(){function e(){this.security=new i.Security,this.dateParsing=new a.DateParsing}return e.prototype.clearCreds=function(){u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.AUTHJWTTOKEN)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.LOGINID))},e.prototype.clearCredsAll=function(){u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.AUTHJWTTOKEN)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.LOGINID)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.REGISTERATIONFAIL)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.PUBLICKEY)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.JWTTOKEN)),u.Storage.getInstance().clear(this.makeKey("pmlc"))},e.prototype.makeKey=function(e){return s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()+"-"+s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()+"-"+e},e.prototype.setGuid=function(e){return r(this,void 0,void 0,function(){var t,n;return o(this,function(r){switch(r.label){case 0:return t=(new Date).getTime(),n="xxxxxxxx-xxxx-3xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var n=(t+16*Math.random())%16|0;return t=Math.floor(t/16),("x"===e?n:3&n|8).toString(16)}),[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.GUID),this.security.aesEncryption.getEncryption(n,e))];case 1:return r.sent(),[2]}})})},e.prototype.handleGUID=function(){return r(this,void 0,void 0,function(){var e,t,n,r,i;return o(this,function(o){switch(o.label){case 0:return[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.PUBLICKEY))];case 1:return e=o.sent(),[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.JWTTOKEN))];case 2:return t=o.sent(),e&&t?(i=(r=JSON).parse,[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.GUID))]):[3,4];case 3:return(n=i.apply(r,[o.sent()]))&&""===this.security.aesEncryption.getDecryption(n,s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())?(alert("Error"),this.clearCredsAll(),[2]):[3,5];case 4:this.setGuid(s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey()),o.label=5;case 5:return[2]}})})},e.prototype.isRegistered=function(){return r(this,void 0,void 0,function(){var e,t;return o(this,function(n){switch(n.label){case 0:return u.Storage.getInstance().clear(this.makeKey("regisFail")),[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.PUBLICKEY))];case 1:return e=n.sent(),[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.JWTTOKEN))];case 2:return t=n.sent(),[2,null!==e&&null!==t]}})})},e.prototype.checkPropCall=function(){return r(this,void 0,void 0,function(){var e,t;return o(this,function(n){switch(n.label){case 0:return[4,u.Storage.getInstance().getItemValue(this.makeKey("pmlc"))];case 1:return e=n.sent(),t=this.dateParsing.dateFormat("propMas",new Date),[2,e===t]}})})},e.prototype.userCredentials=function(e,t,n){return r(this,void 0,void 0,function(){return o(this,function(r){switch(r.label){case 0:return[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.LOGINID),e)];case 1:return r.sent(),[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.AUTHJWTTOKEN),this.security.aesEncryption.getEncryption(t,n))];case 2:return r.sent(),[2]}})})},e.prototype.setPmlcValue=function(){u.Storage.getInstance().setItem(this.makeKey("pmlc"),this.dateParsing.dateFormat("propMas",new Date))},e.prototype.fingerprint=function(){return r(this,void 0,void 0,function(){var e,t,n;return o(this,function(r){switch(r.label){case 0:return n=(t=JSON).parse,[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.GUID))];case 1:return e=n.apply(t,[r.sent()]),[2,this.security.aesEncryption.getDecryption(e,s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())]}})})},e.prototype.getRequestid=function(e,t,n,r){return r.orgId+r.appId+t+e+this.dateParsing.dateFormat("requestid",n)},e.prototype.getClientid=function(e){return e.orgId+"~"+e.appId},e.prototype.generateTxnKey=function(e,t){return r(this,void 0,void 0,function(){var n,r,i,a,s,l;return o(this,function(o){switch(o.label){case 0:return n=this.randomString(32-this.dateParsing.dateFormat("txnDate",e).length),n=this.dateParsing.dateFormat("txnDate",e)+n,a=(i=JSON).parse,[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.PUBLICKEY))];case 1:return r=a.apply(i,[o.sent()]),s=this.security.aesEncryption.getDecryption(r,t.secureKey),l=this.security.rsaEncryption.getRsaEncrypt(n,s),l=this.base64ToHex(l),[2,{t:n,b:l}]}})})},e.prototype.randomString=function(e){for(var t="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",n="",r=e;r>0;--r)n+=t[Math.round(Math.random()*(t.length-1))];return n},e.prototype.base64ToHex=function(e){try{for(var t=void 0,n=0,r=atob(e.replace(/[ \r\n]+$/,"")),o=[];n<r.length;++n){var i=r.charCodeAt(n).toString(16);1===i.length&&(i="0"+i),o[o.length]=i,t=JSON.parse(JSON.stringify(o))}return t.join("")}catch(e){return}},e.prototype.authCredentials=function(e,t,n){return r(this,void 0,void 0,function(){var r,i;return o(this,function(o){switch(o.label){case 0:for(i in r={},e)"public-pem"===i&&(r.key=this.security.aesEncryption.encryptText(e[i].toString(),t));return[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.PUBLICKEY),r.key)];case 1:return o.sent(),[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.JWTTOKEN),n)];case 2:return o.sent(),[2]}})})},e}();t.RequestUtility=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(30),o=n(4),i=n(14),a=n(0),s=function(){function e(){this.security=new a.Security}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.setItem=function(e,t){var n=this;return new Promise(function(r){try{t=n.getEncryptedValue(t,n.encryptedKey||e);var a=n.storageApi.setItem(n.getKeyName(e),JSON.stringify(t));a instanceof Promise?a.then(function(e){r(!0)}):r(!0)}catch(e){throw o.Logger.getInstance().error("Unable to set Item"),new i.CustomError("PW001",e)}})},e.prototype.setDriver=function(e){r.setDriver(this.getDriverByType(e))},e.prototype.clearAll=function(){"sessionStorage"===this.driverType?sessionStorage.clear():r.clear()},e.prototype.clear=function(e){"sessionStorage"===this.driverType?sessionStorage.removeItem(this.getKeyName(e)):r.removeItem(this.getKeyName(e))},e.prototype.getAllKeys=function(){var e,t=this;return new Promise(function(n,a){try{(e="sessionStorage"===t.driverType?Object.keys(sessionStorage):r.keys())instanceof Promise?e.then(function(e){n(t.getDecryptedKeyList(e))}):n(t.getDecryptedKeyList(e))}catch(e){throw o.Logger.getInstance().error("key does not exist in storage"),new i.CustomError("PW001",e)}})},e.prototype.getItemValue=function(e){var t=this;return new Promise(function(n,r){try{var a=t.getItem(e);a instanceof Promise?a.then(function(r){n(t.getDecryptedValue(r,t.encryptedKey||e))}):n(t.getDecryptedValue(a,t.encryptedKey||e))}catch(e){throw o.Logger.getInstance().error("key does not exist in storage"),new i.CustomError("PW001",e)}})},e.prototype.getDriverByType=function(e){var t=null;switch(e){case"localStorage":t=r.LOCALSTORAGE;break;case"indexDB":t=r.INDEXEDDB;break;case"webSql":t=r.WEBSQL;default:t=r.LOCALSTORAGE}return t},e.prototype.setConfiguration=function(e,t,n,o){"sessionStorage"!==e?(r.config({description:"Setting the Configuration Detail of localForage",driver:this.getDriverByType(e),name:"",size:o||4980736,storeName:"keyvaluepairs",version:1}),this.setStorageApi()):this.setSessionStorage(),this.driverType=e,this.isEncryption=t,this.encryptedKey=n},e.prototype.setSessionStorage=function(){this.storageApi=sessionStorage},e.prototype.setStorageApi=function(){this.storageApi=r},e.prototype.getItem=function(e){return this.storageApi.getItem(this.getKeyName(e))},e.prototype.getEncryptedValue=function(e,t){return this.isEncryption?this.security.aesEncryption.getEncryption(JSON.stringify(e),t):e},e.prototype.getDecryptedValue=function(e,t){return e&&this.isEncryption?this.security.aesEncryption.getDecryption(JSON.parse(e),t):e},e.prototype.getKeyName=function(e){return this.isEncryption?btoa(e):e},e.prototype.getDecryptedKeyList=function(e){return this.isEncryption?e.map(function(e){return atob(e)}):e},e}();t.Storage=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(34),o=function(){function e(){}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.setEnvironment=function(e){e.hasOwnProperty("environment")&&(e=e.environment),this.environment=new r.Environment(e)},e.prototype.getEnvironment=function(){return this.environment},e}();t.EnvironmentStore=o},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(29),a=function(e){function t(){return e.call(this)||this}return o(t,e),t.getInstance=function(){return t.instance||(t.instance=new i.CustomConsole),t.instance},t}(i.CustomConsole);t.Logger=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.NETWORK="NETWORK",e.BODYPARAM="bodyParam",e.CALLBACKINVALID="CALLBACKINVALID",e.HEADERPARAM="headerParam",e.GUID="guid",e.REQUESTINVALID="requestInvalid",e.SERVICEINVALID="serviceInvalid",e.DECRYPTION="decryption",e.PARSINGRESPONSE="parsingResponse",e.SERVERCONNECTING="serverConnecting",e.REGISTRATIONFAILED="registrationFailed",e.DUPLICATESESSION="loggedIn",e.UNKNOWN="unknown",e}();t.ErrorConstant=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.mapAPIResponse=function(t,n,r){return t?e.getSuccessResponse(t,n):e.getErrorResponse(t,n,r)},e.getSuccessResponse=function(e,t){return{status:e,data:t}},e.getErrorResponse=function(e,t,n){return{status:e,servercode:t.status,errorCode:n,errorMessage:t.message,completeError:t}},e}();t.UserResponse=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.JWTTOKEN="jwtToken",e.LOGINID="loginId",e.PUBLICKEY="Publickey",e.AUTHJWTTOKEN="authJwtToken",e.GUID="GUID",e.REGISTERATIONFAIL="regisFail",e}();t.StorageConstant=r},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(5),a=n(43),s=n(14),u=function(e){function t(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.apply(this,t)||this}return o(t,e),t.getErrors=function(e){var t={},n={};switch(e){case i.ErrorConstant.NETWORK:t.status=!1,t.message=a.ErrorMessage.NETWORKOFFLINE,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.BODYPARAM:t.status=!1,t.message=a.ErrorMessage.BODYNOTVALID,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.HEADERPARAM:t.status=!1,t.message=a.ErrorMessage.HEADERNOTVALID,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.GUID:t.status=!1,t.message=a.ErrorMessage.GUUIDERROR,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.REQUESTINVALID:t.status=!1,t.message=a.ErrorMessage.REQUESTNOTVALID,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.SERVICEINVALID:t.status=!1,t.message=a.ErrorMessage.MAXSERVICE,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.DECRYPTION:t.status=!1,t.message=a.ErrorMessage.DECRYPTION,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.PARSINGRESPONSE:t.status=!1,t.message=a.ErrorMessage.PARSINGRESPONSE,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.SERVERCONNECTING:t.status=!1,t.message=a.ErrorMessage.SERVERCONNECTION,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.REGISTRATIONFAILED:t.status=!1,t.message=a.ErrorMessage.REGISTRATION,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.DUPLICATESESSION:t.status=!1,t.message=a.ErrorMessage.DUPLICATESESSION,n=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.CALLBACKINVALID:t.status=!1,t.message=a.ErrorMessage.CALLBACKINVALID,n=new s.CustomError("PW-0001",t);break;default:t.status=!1,t.message=a.ErrorMessage.DEFAULTMESSAGE,n=new s.CustomError("PW-0001",t)}return n},t}(Error);t.ErrorHandler=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(42),o=n(44),i=n(45),a=n(48),s=function(){this.networkValidators=new i.NetworkValidation,this.argumentsValidators=new r.ArgumentsValidation,this.requestValidation=new a.PrepareDataValidation,this.httpParameterValidator=new o.HttpParameterValidation};t.Validators=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){this.pwRequest={PWHeader:{clientid:"",deviceid:null,platform:"WEB",authorization:"",requesttype:"",txnkey:"",requestid:"",servicename:"",hash:"",nounce:""},PWBody:{interfaces:{APPLICATION_VERSION:"",DEVICE_TIMESTAMP:"",PW_CLIENT_VERSION:"",fingerprint:"",DEVICE_MAKE:"",DEVICE_MODEL:"",PW_VERSION:"",DEVICE_LATITUDE:"",DEVICE_LONGITUDE:""},services:{}}}};t.PlatwareRequestModel=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.dateFormat=function(e,t){"object"==typeof t||(t=new Date);var n="",r="",o="",i="",a="",s="",u="";return"txnDate"===e?(n=t.getUTCDate()+"",r=t.getUTCMonth()+1+"",o=t.getUTCFullYear()+"",i=t.getUTCHours()+"",a=t.getUTCMinutes()+"",s=t.getUTCSeconds()+"",u=t.getUTCMilliseconds()+""):(n=t.getDate()+"",r=t.getMonth()+1+"",o=t.getFullYear()+"",i=t.getHours()+"",a=t.getMinutes()+"",s=t.getSeconds()+"",u=t.getMilliseconds()+""),n=this.checkZero(n),r=this.checkZero(r),o=this.checkZero(o),i=this.checkZero(i),a=this.checkZero(a),s=this.checkZero(s),"device"===e?n+"-"+r+"-"+o+" "+i+":"+a+":"+s:"requestid"===e?n+r+o+i+a+s+u:"txnDate"===e?o.toString().substr(-2)+r+n+i+a+s+this.addZero(u.toString()):"propMas"===e?n+"-"+r+"-"+o:n+r+o+i+a+s+u},e.prototype.addZero=function(e){return 2==e.length?e="0"+e:1==e.length&&(e="00"+e),e},e.prototype.checkZero=function(e){return 1==e.length&&(e="0"+e),e},e}();t.DateParsing=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(22),o=n(41),i=n(23),a=function(){function e(e,t){this.setDefaultProps=new i.SetPWRequest,this.setDefaultProps.setPWRequest(),this.hexString=new o.HexUtility,this.apiType=new r.ApiType,this.fingerPrint=t,this.windowNavigator=window.navigator,e.reqData.services&&(this.serviceName=Object.keys(e.reqData.services).join("~").toString()),this.currentDate=new Date,this.currentNounce=this.currentDate.getTime(),this.nounce=this.hexString.getHexString(this.currentDate.getTime().toString()),this.envProp=e.envProps.envProps}return Object.defineProperty(e.prototype,"getFingerPrint",{get:function(){return this.fingerPrint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getWindowNavigator",{get:function(){return this.windowNavigator},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getServiceName",{get:function(){return this.serviceName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getCurrentDate",{get:function(){return this.currentDate},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getCurrentNounce",{get:function(){return this.currentNounce},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getNounce",{get:function(){return this.nounce},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getEnvProp",{get:function(){return this.envProp},enumerable:!0,configurable:!0}),e}();t.RequestProprty=a},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(24),a=n(54),s=n(25),u=n(55),c=n(3),l=n(1),d=n(19),p=n(21),h=n(9),f=n(4),g=n(26),y=function(){function e(){this.requestController=new p.RequestController,this.networkController=new d.NetworkController,this.requestUtility=new l.RequestUtility,this.handler=new i.Handlers,this.validator=new h.Validators}return e.prototype.runLifeCycle=function(){},e.prototype.doRegister=function(e){return r(this,void 0,void 0,function(){var t,n,r,i;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,13,,14]),f.Logger.getInstance().log("=================Inside doRegister Method ========="),t=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+"/register",[4,this.requestUtility.isRegistered()];case 1:return o.sent()?[3,11]:(f.Logger.getInstance().log("==Registration is not Done===, Initiate the Registration Process"),[4,this.requestController.getRegistrationRequest(e)]);case 2:return n=o.sent(),f.Logger.getInstance().log("==Registration request preparation Done",n),[4,this.callNetworkController({url:t,body:n.PWBody,header:n.PWHeader})];case 3:return(r=o.sent()).status?[4,(new u.RegistrationResponseHandler).readResponse(r.body,r.headers)]:[3,6];case 4:return o.sent(),[4,this.requestUtility.isRegistered()];case 5:return[2,o.sent()];case 6:return o.trys.push([6,9,,10]),[4,this.handler.httpRespnseponseHandled(r.body,n.PWHeader)];case 7:return i=o.sent(),[4,(new u.RegistrationResponseHandler).registrationErrorHandle(i,r.body,e)];case 8:return o.sent(),[3,10];case 9:throw o.sent();case 10:return[3,12];case 11:return[2,Promise.resolve(!0)];case 12:return[3,14];case 13:throw o.sent();case 14:return[2]}})})},e.prototype.doAuth=function(e){return r(this,void 0,void 0,function(){var t,n,r,i,s;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,9,,10]),t=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+"/register",f.Logger.getInstance().log("If registration is not done yet ==> Prepare request For registeration and do it"),[4,this.doRegister(e)];case 1:return o.sent()?[4,this.requestController.getAuthRequest(e)]:[3,8];case 2:return n=o.sent(),[4,this.callNetworkController({url:t,body:n.temp,header:n.PWHeader})];case 3:return(r=o.sent()).status?(f.Logger.getInstance().log("If response is True ==> Save The Credentials"),[4,(new a.AuthResponseHandler).readResponse(r.body,r.headers,n.loginId,r,n.txnkey)]):[3,5];case 4:return[2,o.sent()];case 5:return o.trys.push([5,7,,8]),f.Logger.getInstance().log("If response is False ==> Handle the error"),i=this.handler.httpRespnseponseHandled(r.body,n.PWHeader),[4,(new a.AuthResponseHandler).authErrorHandle(i,r.body,e)];case 6:if((s=o.sent()).status)return[2,s];throw s;case 7:throw o.sent();case 8:return[3,10];case 9:throw o.sent();case 10:return[2]}})})},e.prototype.doGateway=function(e,t,n,i){return r(this,void 0,void 0,function(){var r,a,u,l,d;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,11,,12]),r=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+e.url,f.Logger.getInstance().log("====Checking if Registartion is Done or not==="),[4,this.doRegister(e)];case 1:return o.sent()?[4,this.requestController.getGatewayRequest(e)]:[3,10];case 2:return a=o.sent(),[4,this.callNetworkController({url:r,body:a.temp,header:a.PWHeader},n,i,"byService",a,{body:e,header:t})];case 3:return(u=o.sent()).isWorker?(f.Logger.getInstance().log("API running on worker: No need to wait here for response"),[2,Promise.resolve(u)]):[3,4];case 4:return u.status?(f.Logger.getInstance().log("If response is True ==> Save The Credentials"),a.txnkey=!1===navigator.onLine?this.transactionKey:a.txnkey,[4,(new s.GatewayResponseHandler).readResponse(u.body,u.headers,a.loginId,u,a.txnkey)]):[3,6];case 5:return[2,o.sent()];case 6:return o.trys.push([6,9,,10]),f.Logger.getInstance().log("If response is False ==> Handle the error"),[4,this.handler.httpRespnseponseHandled(u.body,a.PWHeader)];case 7:return l=o.sent(),[4,(new s.GatewayResponseHandler).gatewayErrorHandle(l,u.body,e,t)];case 8:if((d=o.sent()).status)return[2,d];throw d;case 9:throw o.sent();case 10:return[3,12];case 11:throw o.sent();case 12:return[2]}})})},e.prototype.callNetworkController=function(e,t,n,r,o,i){return f.Logger.getInstance().log("==calling Network Layer with request",e),this.networkController.doCall(e,t,n,r,o,i)},e.prototype.doCall=function(e,t,n,i){return r(this,void 0,void 0,function(){var r;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,9,,10]),f.Logger.getInstance().log("Check Type Of Call ==> Authentication or Gateway"),navigator.geolocation?[4,this.validator.networkValidators.getPosition()]:[3,2];case 1:r=o.sent(),e.envProps.envProps.lat=r.latitude,e.envProps.envProps.lon=r.longitude,o.label=2;case 2:return f.Logger.getInstance().log("checking System is online or not"),this.validator.networkValidators.isNetworkAvailable()?"AUTH_VAHANA"!==Object.keys(e.reqData.services)[0]&&"AUTH"!==Object.keys(e.reqData.services)[0]&&"VAHANA_AUTHENTICATION"!==Object.keys(e.reqData.services)[0]?[3,4]:(f.Logger.getInstance().log("========== Calling Auth Service ============="),[4,this.doAuth(e)]):[3,8];case 3:return[2,o.sent()];case 4:return"REGISTERAPP"!==Object.keys(e.reqData.services)[0]?[3,6]:[4,this.doRegister(e)];case 5:return[2,o.sent()];case 6:return f.Logger.getInstance().log("=====================Calling Gateway ======================"),[4,this.doGateway(e,t,n,i)];case 7:return[2,o.sent()];case 8:return[3,10];case 9:throw o.sent();case 10:return[2]}})})},e.prototype.doEndPointCall=function(e,t,n){return r(this,void 0,void 0,function(){var r,i,a,s,u,l;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,13,,14]),"/dynamic-router",r=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+"/dynamic-router"+e.url,navigator.geolocation?[4,this.validator.networkValidators.getPosition()]:[3,2];case 1:i=o.sent(),e.envProps.envProps.lat=i.latitude,e.envProps.envProps.lon=i.longitude,o.label=2;case 2:return[4,this.doRegister(e)];case 3:return o.sent()?[4,this.requestController.getEndPointRequest(e)]:[3,12];case 4:return a=o.sent(),[4,this.callNetworkController({url:r,body:a.temp,header:a.PWHeader},t,n,"byUrl",a,e)];case 5:return s=o.sent(),console.log(s),s.isWorker?(f.Logger.getInstance().log("API running on worker: No need to wait here for response"),[2,Promise.resolve(s)]):[3,6];case 6:return s.status?(e.txnkey=!1===navigator.onLine?this.transactionKey:e.txnkey,[4,(new g.EndPointResponseHandler).readResponse(s.body,s.headers,a.txnkey)]):[3,8];case 7:return[2,o.sent()];case 8:return o.trys.push([8,11,,12]),f.Logger.getInstance().log("If response is False ==> Handle the error"),[4,this.handler.httpRespnseponseHandled(s.body,e.PWHeader)];case 9:return u=o.sent(),[4,(new g.EndPointResponseHandler).dynamicRouterErrorHandle(u,s.body,e)];case 10:if((l=o.sent()).status)return[2,l];throw l;case 11:throw o.sent();case 12:return[3,14];case 13:throw o.sent();case 14:return[2]}})})},e}();t.ServiceController=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){this.code=e,this.response=t};t.CustomError=r},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=n(2),i=n(17),a=function(){function e(){this.worker=!1}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.setConfiguration=function(e){this.configuration=e,this.doAppConfiguration()},e.prototype.getConfiguration=function(){return this.configuration},e.prototype.doAppConfiguration=function(){var e=this.getConfiguration();r.Logger.getInstance().setLogger(e.logging),o.Storage.getInstance().setConfiguration(e.storage,e.enableStorageEncryption||!1,e.storageEncryptionKey),i.DocumentManager.basePoint=e.DMSPoint?e.DMSPoint:i.DocumentManager.basePoint},e}();t.AppConfigStore=a},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(6),a=n(4),s=n(3),u=n(18),c=n(56),l=function(){function e(){this.constantUrl=c.controllerConst}return e.getInstance=function(){return!e.basePoint||e.basePoint,this.instance},e.prototype.updateDocumentMetadata=function(e,t,n){return this.updateMetaData(e,t,n,this.constantUrl.DMS.uploadMetaData,this.constantUrl.DMS.DOCUMENT)},e.prototype.updateFileMetadata=function(e,t,n){return this.updateMetaData(e,t,n,this.constantUrl.DMS.uploadMetaData,this.constantUrl.DMS.FILE)},e.prototype.getViewerDataById=function(t,n,c){var l=this,d=e.basePoint+this.constantUrl.DMS.fetchByFileId;return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========VIEWER DATA BY ID Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&n instanceof Object&&c instanceof Object&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=n.refId,r={},d=d+"/"+n.storageId+"/"+n.fileId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(r,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.updateFileMetaData=function(t,n,c){var l=this,d=e.basePoint+this.constantUrl.DMS.updateFileMetaData;return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l,h,f;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========LISTING DATA Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&n instanceof Object&&c instanceof Object&&n.storageId&&n.refId&&n.files instanceof Array&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=n.refId,r=[],l={},n.files.forEach(function(e){l.id=e.id,l.metadata=e.customMetadata,r.push(l)}),d=d+"/"+n.storageId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(r,c,d)]):[3,2];case 1:return h=o.sent(),e(h),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return f=o.sent(),p(f),[3,5];case 5:return[2]}})})})},e.prototype.downloadFileUrl=function(t,n,c){var l=this,d=e.basePoint+this.constantUrl.DMS.downloadUrl;return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========DOWNLOAD URL Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&n instanceof Object&&c instanceof Object&&n.fileId instanceof Array&&n.storageId&&n.fileType&&n.refId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=n.refId,r={fileIds:n.fileId,type:n.fileType},d=d+"/"+n.storageId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(r,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.deleteByFileId=function(t,n,c){var l=this,d=e.basePoint+this.constantUrl.DMS.deleteFileId;return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========DELETE DATA Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&n instanceof Object&&c instanceof Object&&n.fileId instanceof Array&&n.storageId&&n.refId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=n.refId,r={fileIds:n.fileId},d=d+"/"+n.storageId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(r,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.getAllDocData=function(t,n,c){var l=this,d=e.basePoint+this.constantUrl.DMS.docAndFile;return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========DOC AND FILE DATA Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&n instanceof Object&&c instanceof Object&&n.refId&&n.storageId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=n.refId,r={},d=d+"/"+n.storageId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(r,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.getListData=function(t,n,c){var l=this,d=e.basePoint+this.constantUrl.DMS.listingData;return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========LISTING DATA Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&n instanceof Object&&c instanceof Object&&n.folderPath&&n.refId&&n.storageId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),r={refId:n.refId,path:n.folderPath},d=d+"/"+n.storageId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(r,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.uploadDocument=function(t,n,c){var l=this,d=this.constantUrl.DMS.uploadStartPoint;return d=d+e.basePoint+(n.documentId?this.constantUrl.DMS.updateDocument:this.constantUrl.DMS.upload),new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l,h,f;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========UPLOAD DOCUMENT Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),"string"==typeof d&&n instanceof Object&&c instanceof Object&&n.documentName&&n.files&&n.folderPath&&n.refId&&n.storageId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(d=d+"/"+n.storageId,a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),r=new FormData,l={files:[],refId:n.refId,folderPath:n.folderPath},a.Logger.getInstance().log("setting up request parameters"),l.documentId=n.documentId?n.documentId:null,l.documentName=n.documentName,l.customMetadata=n.customMetaData,a.Logger.getInstance().log("Adding files in request parameters for form data"),l.files=this.filesFormData(n.files,r),r.append("uploadRequest",JSON.stringify(l)),[4,(new u.AppController).runForEndPoint(r,c,d)]):[3,2];case 1:return h=o.sent(),e(h),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return f=o.sent(),p(f),[3,5];case 5:return[2]}})})})},e.prototype.uploadFile=function(t,n,c){var l=this,d=this.constantUrl.DMS.uploadStartPoint+e.basePoint+this.constantUrl.DMS.upload;return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l,h,f,g,y;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========UPLOAD FILE Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),"string"==typeof d&&n instanceof Object&&c instanceof Object&&n.files&&n.folderPath&&n.refId&&n.storageId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),r=new FormData,l={files:[],refId:n.refId,folderPath:n.folderPath},d=d+"/"+n.storageId,a.Logger.getInstance().log("setting up request parameters"),h=this.filesFormData(n.files,r),(y=l.files).push.apply(y,h),r.append("uploadRequest",JSON.stringify(l)),a.Logger.getInstance().log(r.getAll("files")),a.Logger.getInstance().log(r.getAll("uploadRequest")),[4,(new u.AppController).runForEndPoint(r,c,d)]):[3,2];case 1:return f=o.sent(),e(f),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return g=o.sent(),p(g),[3,5];case 5:return[2]}})})})},e.prototype.deleteFile=function(t,n,c){var l=this,d=e.basePoint+this.constantUrl.DMS.deleteFile;return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========DO DELETE FILE/DOCUMENT Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),""!==d&&"string"==typeof d&&n instanceof Object&&c instanceof Object&&n.storageId&&n.id&&n.refId&&n.type&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),d=d+"/"+n.storageId+"/"+n.refId+"/"+n.type+"/"+n.id+"/"+(!!n.deleteWithHistory&&n.deleteWithHistory),[4,(new u.AppController).runForEndPoint({},c,d)]):[3,2];case 1:return r=o.sent(),e(r),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return l=o.sent(),p(l),[3,5];case 5:return[2]}})})})},e.prototype.updateMetaData=function(t,n,c,l,d){var p=this;return new Promise(function(h,f){return r(p,void 0,void 0,function(){var r,p,g;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========UPDATE DOCUMENT Metadata  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),""!==l&&"string"==typeof l&&n instanceof Object&&c instanceof Object&&n.customMetaData&&n.id&&n.refId&&n.storageId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=n.refId,l=e.basePoint+"/"+l+"/"+n.storageId,r={refId:n.refId,type:d,id:n.id,metadata:n.customMetaData},[4,(new u.AppController).runForEndPoint(r,c,l)]):[3,2];case 1:return p=o.sent(),h(p),[3,3];case 2:h(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return g=o.sent(),f(g),[3,5];case 5:return[2]}})})})},e.prototype.getFilesForFolder=function(t,n,c){var l=this,d=e.basePoint+this.constantUrl.DMS.fetchForFolder;return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("========= getFilesByPath =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),""!==d&&"string"==typeof d&&n instanceof Object&&c instanceof Object&&n.refId&&n.storageId&&n.path&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),d=d+"/"+n.storageId,r={refId:n.refId,path:n.path},[4,(new u.AppController).runForEndPoint(r,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.getFilesForDocument=function(t,n,c){var l=this,d=e.basePoint+this.constantUrl.DMS.fetchForDocument;return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("========= getFilesForDocument =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),""!==d&&"string"==typeof d&&n instanceof Object&&c instanceof Object&&n.refId&&n.storageId&&n.path&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),d=d+"/"+n.storageId,r={refId:n.refId,path:n.path,documentName:n.documentName},[4,(new u.AppController).runForEndPoint(r,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.filesFormData=function(e,t){var n=[];try{return e.forEach(function(e){t.append("files",e);var r=Object.keys(e),o={customMetadata:{}};for(var i in o.name=e.name,o.type=e.type,r)o[r[i]]=e[r[i]];n.push(o)}),n}catch(e){a.Logger.getInstance().log(e)}},e.prototype.storageId=function(t,n,c){var l=this,d=e.basePoint+"/dmsconfig/admin/get/dmsClientDetails";return new Promise(function(e,p){return r(l,void 0,void 0,function(){var r,l;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("========Do STORAGE METHOD=========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),""!==d&&"string"==typeof d&&c instanceof Object&&n instanceof Object&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),[4,(new u.AppController).runForEndPoint({},c,d)]):[3,2];case 1:return r=o.sent(),a.Logger.getInstance().log(c),a.Logger.getInstance().log(d),a.Logger.getInstance().log(r),e(r),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return l=o.sent(),p(l),[3,5];case 5:return[2]}})})})},e.instance=new e,e}();t.DocumentManager=l},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(19),a=n(21),s=n(13),u=n(4),c=function(){function e(){this.requestController=new a.RequestController,this.networkController=new i.NetworkController,this.serviceController=new s.ServiceController}return e.prototype.run=function(e,t,n,i){return r(this,void 0,void 0,function(){var r;return o(this,function(o){switch(o.label){case 0:u.Logger.getInstance().log("Inside AppController class run()"),u.Logger.getInstance().log("Map the body and header to Platware Request, invoking => mapToPlatwareRequest(body, header)"),o.label=1;case 1:return o.trys.push([1,3,,4]),u.Logger.getInstance().log("Request Mapped to Platware Request"),u.Logger.getInstance().log("Invloking service controller class method DoCall()"),r=this.requestController.mapToPlatwareRequest(e,t),[4,this.serviceController.doCall(r,t,n,i)];case 2:return[2,o.sent()];case 3:throw o.sent();case 4:return[2]}})})},e.prototype.runAuth=function(e,t){return r(this,void 0,void 0,function(){var n;return o(this,function(r){switch(r.label){case 0:u.Logger.getInstance().log("Inside AppController class run()"),u.Logger.getInstance().log("Map the body and header to Platware Request, invoking => mapToPlatwareRequest(body, header)"),r.label=1;case 1:return r.trys.push([1,3,,4]),u.Logger.getInstance().log("Request Mapped to Platware Request"),u.Logger.getInstance().log("Invloking service controller class method DoCall()"),n=this.requestController.mapToPlatwareRequest(e,t),[4,this.serviceController.doAuth(n)];case 2:return[2,r.sent()];case 3:throw r.sent();case 4:return[2]}})})},e.prototype.runForEndPoint=function(e,t,n,i,a){return r(this,void 0,void 0,function(){var r;return o(this,function(o){switch(o.label){case 0:u.Logger.getInstance().log("Inside AppController class run()"),u.Logger.getInstance().log("Map the body and header to Platware Request, invoking => mapToPlatwareRequest(body, header)"),o.label=1;case 1:return o.trys.push([1,3,,4]),r=this.requestController.mapToPlatwareRequestUrl(e,t,n),[4,this.serviceController.doEndPointCall(r,i,a)];case 2:return[2,o.sent()];case 3:throw o.sent();case 4:return[2]}})})},e}();t.AppController=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(36),o=n(16),i=n(37),a=n(38),s=n(4),u=n(20),c=function(){function e(){}return e.prototype.doCall=function(e,t,n,r,o,i){return this.setNetwotkAPI(),this.doNetworkCall(e,t,n,r,o,i)},e.prototype.setNetwotkAPI=function(){var e=o.AppConfigStore.getInstance().getConfiguration().networkDriver;switch(s.Logger.getInstance().log("setting network Driver",e),e){case"FETCH":this.networkApi=new r.FetchWrapper,s.Logger.getInstance().log("Using Fetch Driver");break;case"AXIOS":this.networkApi=new i.AxiosWrapper,s.Logger.getInstance().log("Using AXIOS Driver");break;case"XMLHTTP":this.networkApi=new a.XmlHttpWrapper,s.Logger.getInstance().log("Using XMLHTTP Driver");break;default:this.networkApi=new r.FetchWrapper,s.Logger.getInstance().log("Network API doesn't match to passed configuartion")}},e.prototype.doNetworkCall=function(e,t,n,r,o,i){return s.Logger.getInstance().log("Calling Post method of Network API",e),t?(u.WebWorkerWrapper.getInstance().postMessage({request:e,apiType:r,platwareRequest:o,uiRequest:i,uid:n}),new Promise(function(e,t){e({isWorker:!0,status:!0})})):this.networkApi.doPostCall(e)},e}();t.NetworkController=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(39),o=function(){function e(){}return e.getInstance=function(){return e.instance||(e.instance=new r),e.instance},e}();t.WebWorkerWrapper=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(40),o=n(49),i=n(50),a=n(51),s=n(1),u=n(8),c=n(5),l=n(23),d=n(52),p=n(53),h=function(){function e(){this.registartionService=new r.RegistrationService,this.gatewayService=new o.GatewayService,this.authService=new i.AuthService,this.prepareRequest=new a.PrepareRequest,this.requestUtility=new s.RequestUtility,this.setPWRequest=new l.SetPWRequest}return e.prototype.initRequest=function(){this.requestUtility.handleGUID()},e.prototype.getRegistrationRequest=function(e){return this.registartionService.getRegistrartionRequest(e)},e.prototype.getGatewayRequest=function(e){return this.gatewayService.getRequestService(e)},e.prototype.getAuthRequest=function(e){return this.authService.getAuthRequest(e)},e.prototype.getEndPointRequest=function(e){return(new p.EndPointService).getRequestService(e)},e.prototype.mapToPlatwareRequest=function(e,t){try{return this.initRequest(),this.prepareRequest.mapToPlatwareRequest(e,t)}catch(e){throw u.ErrorHandler.getErrors(c.ErrorConstant.REQUESTINVALID)}},e.prototype.mapToPlatwareRequestUrl=function(e,t,n){try{return this.initRequest(),(new d.PrepareRequestForEndPoint).mapToPlatwareRequestEndPoint(e,t,n)}catch(e){throw u.ErrorHandler.getErrors(c.ErrorConstant.REQUESTINVALID)}},e}();t.RequestController=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.setapiType=function(e){this.apiType=e},e.prototype.getapiType=function(){return this.apiType},e}();t.ApiType=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),o=function(){function e(){this.pwRequest=new r.PlatwareRequestModel}return e.prototype.setPWRequest=function(){this.pwRequest=new r.PlatwareRequestModel},e}();t.SetPWRequest=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(){this.requestUtility=new r.RequestUtility}return e.prototype.httpRespnseponseHandled=function(e,t){try{if(t)return"625"===e.status&&"LOGOUT"===t.servicename?(this.requestUtility.clearCreds(),t.servicename):"401"===e.status||"627"===e.status||"537"===e.status?t.servicename:"621"===e.status?t.servicename:"402"===e.status||"622"===e.status||"628"===e.status||"528"===e.status?(this.requestUtility.clearCreds(),t.servicename):"Login Failed";if("401"===e.status||"627"===e.status||"537"===e.status)return"";if("402"!==e.status&&"622"!==e.status&&"628"!==e.status&&"528"!==e.status)return"Login Failed";this.requestUtility.clearCreds()}catch(e){throw e}},e}();t.Handlers=o},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(1),s=n(2),u=n(8),c=n(5),l=n(13),d=n(7),p=n(6),h=function(){function e(){this.security=new i.Security,this.requestUtility=new a.RequestUtility,this.serviceController=new l.ServiceController}return e.prototype.readResponse=function(e,t,n,i,a){return r(this,void 0,void 0,function(){var e;return o(this,function(n){"function"==typeof t.get?this.authKey=t.get("Authorization"):this.authKey=t.authKey;try{return e=JSON.parse(this.security.aesEncryption.getDecryption(i.body.response,a)),[2,p.UserResponse.mapAPIResponse(!0,this.getMappedResponse(e))]}catch(e){throw e}return[2]})})},e.prototype.gatewayErrorHandle=function(e,t,n,i){return r(this,void 0,void 0,function(){var r,a,l,h;return o(this,function(o){switch(o.label){case 0:if("Login Failed"===e)throw p.UserResponse.mapAPIResponse(!1,t,"PW-0003");return[4,s.Storage.getInstance().getItemValue(this.requestUtility.makeKey(d.StorageConstant.REGISTERATIONFAIL))];case 1:return null!==o.sent()?[3,2]:(a=!1,[3,4]);case 2:return[4,s.Storage.getInstance().getItemValue(this.requestUtility.makeKey(d.StorageConstant.REGISTERATIONFAIL))];case 3:a=o.sent(),o.label=4;case 4:if(r=a,"LOGOUT"!==e||"625"!==t.status)return[3,5];throw this.requestUtility.clearCredsAll(),p.UserResponse.mapAPIResponse(!0,t,"PW-0002");case 5:return"REGISTERAPP"===e&&"401"===t.status||"627"===t.status||"537"===t.status?r?[3,7]:(this.requestUtility.clearCredsAll(),s.Storage.getInstance().setItem(this.requestUtility.makeKey(d.StorageConstant.REGISTERATIONFAIL),!0),[4,this.serviceController.doGateway(n,i)]):[3,9];case 6:return[2,o.sent()];case 7:throw this.requestUtility.clearCredsAll(),l=u.ErrorHandler.getErrors(c.ErrorConstant.REGISTRATIONFAILED),p.UserResponse.mapAPIResponse(!1,l,l.code);case 8:return[3,14];case 9:return"AUTH_VAHANA"!==e&&"AUTH"!==e&&"VAHANA_AUTHENTICATION"!==e||"621"!==t.status?[3,13]:confirm("You are already logged in. Do you want to kill existing session?")?(!!n.hasOwnProperty("header")?n.header.isforcelogin="Y":(n.header={},n.header.isforcelogin="Y"),[4,this.serviceController.doAuth(n)]):[3,11];case 10:return[2,o.sent()];case 11:throw h=u.ErrorHandler.getErrors(c.ErrorConstant.DUPLICATESESSION),p.UserResponse.mapAPIResponse(!1,h,h.code);case 12:return[3,14];case 13:throw"402"===t.status||"622"===t.status||"628"===t.status||"528"===t.status?(this.requestUtility.clearCreds(),p.UserResponse.mapAPIResponse(!1,t,"PW-0002")):"Login Failed"===e||0!==t.status?p.UserResponse.mapAPIResponse(!1,t,"PW-0003"):p.UserResponse.mapAPIResponse(!1,t,t.status);case 14:return[2]}})})},e.prototype.getMappedResponse=function(e){var t={};for(var n in e.services){if("REGISTERUSER"===n){t.REGISTERUSER=e.services[n].records;break}t[n]=e.services[n].records}return t},e}();t.GatewayResponseHandler=h},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(1),s=n(13),u=n(6),c=n(2),l=n(7),d=n(8),p=n(5),h=function(){function e(){this.security=new i.Security,this.requestUtility=new a.RequestUtility,this.serviceController=new s.ServiceController}return e.prototype.readResponse=function(e,t,n){return r(this,void 0,void 0,function(){var r;return o(this,function(o){"function"==typeof t.get?this.authKey=t.get("Authorization"):this.authKey=t.authKey;try{return r=JSON.parse(this.security.aesEncryption.getDecryption(e.response,n)),[2,u.UserResponse.mapAPIResponse(!0,r)]}catch(e){throw e}return[2]})})},e.prototype.dynamicRouterErrorHandle=function(e,t,n){return r(this,void 0,void 0,function(){var r,i,a,s;return o(this,function(o){switch(o.label){case 0:if("Login Failed"===e)throw u.UserResponse.mapAPIResponse(!1,t,"PW-0003");return[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(l.StorageConstant.REGISTERATIONFAIL))];case 1:return null!==o.sent()?[3,2]:(i=!1,[3,4]);case 2:return[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(l.StorageConstant.REGISTERATIONFAIL))];case 3:i=o.sent(),o.label=4;case 4:return r=i,"627"!==t.status&&"537"!==t.status?[3,8]:r?[3,6]:(this.requestUtility.clearCredsAll(),c.Storage.getInstance().setItem(this.requestUtility.makeKey(l.StorageConstant.REGISTERATIONFAIL),!0),[4,this.serviceController.doEndPointCall(n)]);case 5:return[2,o.sent()];case 6:throw this.requestUtility.clearCredsAll(),a=d.ErrorHandler.getErrors(p.ErrorConstant.REGISTRATIONFAILED),u.UserResponse.mapAPIResponse(!1,a,a.code);case 7:return[3,9];case 8:if("402"===t.status||"622"===t.status||"628"===t.status||"528"===t.status)throw this.requestUtility.clearCreds(),u.UserResponse.mapAPIResponse(!1,t,"PW-0002");if("Login Failed"===e||0!==t.status)throw u.UserResponse.mapAPIResponse(!1,t,"PW-0003");try{throw u.UserResponse.mapAPIResponse(!1,t,t.status)}catch(e){throw s=d.ErrorHandler.getErrors(p.ErrorConstant.UNKNOWN),u.UserResponse.mapAPIResponse(!1,s,s.code)}o.label=9;case 9:return[2]}})})},e}();t.EndPointResponseHandler=h},function(e,t,n){(function(t){e.exports=t.Library=n(28)}).call(this,n(15))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(4),a=n(16),s=n(3),u=n(9),c=n(18),l=n(17),d=n(57),p=n(6),h=n(2),f=n(0),g=n(20),y=n(25),v=n(24),m=n(26),w=function(){function e(){this.workerHandlers=[],this.addWorkerListner(),this.handler=new v.Handlers}return e.prototype.executeApi=function(e,t,n,r){try{i.Logger.getInstance().log("=========Calling Execute Api Method  =========="),i.Logger.getInstance().log("validating arguments are correct or not"),(new u.Validators).argumentsValidators.isValidArguments(arguments)&&(i.Logger.getInstance().log("Argument's are valid ==> set the environment passes is correct or not"),void 0!==e&&(s.EnvironmentStore.getInstance().setEnvironment(e.enviornment||e),i.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),i.Logger.getInstance().log("Process the Flow ==> prepare data and call to server"),(new c.AppController).run(t,n).then(function(e){return r(e)}).catch(function(e){return r(e)}))}catch(e){throw i.Logger.getInstance().error(e),p.UserResponse.mapAPIResponse(!1,e.response,e.code)}},e.prototype.doPost=function(e,t,n,r,o){i.Logger.getInstance().log("=========Inside Do Post Api Method  =========="),i.Logger.getInstance().log("validating arguments are correct or not");try{if((new u.Validators).argumentsValidators.isValidArguments(arguments,!0))return i.Logger.getInstance().log("Argument's are valid ==> set the environment passes is correct or not"),void 0!==e&&(s.EnvironmentStore.getInstance().setEnvironment(e),i.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),i.Logger.getInstance().log("Process the Flow ==> prepare data and call to server"),new Promise(function(e,i){(new c.AppController).run(t,n,r,o).then(function(t){!0!==t?(new d.FilterResponse).filterResponse(t).then(function(t){e(t)}).catch(function(e){i(e)}):e(t)}).catch(function(e){i(e)})})}catch(e){throw p.UserResponse.mapAPIResponse(!1,e.response,e.code)}},e.prototype.doPostWithoutParsing=function(e,t,n,r){i.Logger.getInstance().log("=========Inside Do Post Api Method  =========="),i.Logger.getInstance().log("validating arguments are correct or not");try{if((new u.Validators).argumentsValidators.isValidArguments(arguments,!0))return i.Logger.getInstance().log("Argument's are valid ==> set the environment passes is correct or not"),void 0!==e&&(s.EnvironmentStore.getInstance().setEnvironment(e),i.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),i.Logger.getInstance().log("Process the Flow ==> prepare data and call to server"),new Promise(function(e,o){(new c.AppController).run(t,n,r).then(function(t){e(t)}).catch(function(e){o(e)})})}catch(e){throw p.UserResponse.mapAPIResponse(!1,e.response,e.code)}},e.prototype.doAuthentication=function(e,t,n){i.Logger.getInstance().log("=========Inside Do Post Api Method  =========="),i.Logger.getInstance().log("validating arguments are correct or not");try{if((new u.Validators).argumentsValidators.isValidArguments(arguments,!0))return i.Logger.getInstance().log("Argument's are valid ==> set the environment passes is correct or not"),void 0!==e&&(s.EnvironmentStore.getInstance().setEnvironment(e),i.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),i.Logger.getInstance().log("Process the Flow ==> prepare data and call to server"),new Promise(function(e,r){(new c.AppController).runAuth(t,n).then(function(t){e(t)}).catch(function(e){r(e)})})}catch(e){throw p.UserResponse.mapAPIResponse(!1,e.response,e.code)}},e.prototype.doPostByUrl=function(e,t,n,a,u,l){var d=this;return new Promise(function(h,f){return r(d,void 0,void 0,function(){var r,d;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),i.Logger.getInstance().log("=========DO POSTBYURL Method  =========="),i.Logger.getInstance().log("validating arguments are correct or not"),""!==a&&"string"==typeof a&&t instanceof Object&&n instanceof Object?(void 0!==e&&(s.EnvironmentStore.getInstance().setEnvironment(e),i.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),[4,(new c.AppController).runForEndPoint(t,n,a,u,l)]):[3,2];case 1:return r=o.sent(),h(r),[3,3];case 2:h(p.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return d=o.sent(),f(d),[3,5];case 5:return[2]}})})})},e.prototype.config=function(e){i.Logger.getInstance().log("Configuration Passed to API GATEWAY CLIENT => ",e);try{a.AppConfigStore.getInstance().setConfiguration(e)}catch(t){i.Logger.getInstance().error("Error in Setting the Configuration of API GATEWAY CLIENT ==> It can be due to wrong configuration passed",e)}},e.prototype.getStorageAPI=function(){return h.Storage.getInstance()},e.prototype.getEncryptionAPI=function(){return new f.Security},e.prototype.getDMSAPI=function(){return l.DocumentManager.getInstance()},e.prototype.addWorkerHandler=function(e){this.workerHandlers.push(e)},e.prototype.addWorkerListner=function(){var e=this;g.WebWorkerWrapper.getInstance().onmessage=function(t){return r(e,void 0,void 0,function(){var e,n,r,a,s,u=this;return o(this,function(o){switch(o.label){case 0:return"byService"!==t.data.apiType?[3,6]:t.data.resp.status?(i.Logger.getInstance().log("If response is True ==> Save The Credentials"),t.data.platwareRequest.txnkey=t.data.platwareRequest.txnkey,[4,(new y.GatewayResponseHandler).readResponse(t.data.resp.body,t.data.resp.headers,t.data.platwareRequest.loginId,t.data.resp,t.data.platwareRequest.txnkey)]):[3,2];case 1:return e=o.sent(),(new d.FilterResponse).filterResponse(e).then(function(e){var t=e;u.workerHandlers&&u.workerHandlers.forEach(function(e){e.call(null,t)})}).catch(function(e){var t=e;u.workerHandlers&&u.workerHandlers.forEach(function(e){e.call(null,t)})}),[3,5];case 2:return i.Logger.getInstance().log("If response is False ==> Handle the error"),[4,this.handler.httpRespnseponseHandled(t.data.resp.body,t.data.platwareRequest.PWHeader)];case 3:return a=o.sent(),[4,(new y.GatewayResponseHandler).gatewayErrorHandle(a,t.data.resp.body,t.data.uiRequest.body,t.data.uiRequest.header)];case 4:n=o.sent(),this.workerHandlers&&this.workerHandlers.forEach(function(e){e.call(null,Object.assign(n,{uid:t.data.uid}))}),o.label=5;case 5:return[3,11];case 6:return t.data.resp.status?[4,(new m.EndPointResponseHandler).readResponse(t.data.resp.body,t.data.resp.headers,t.data.platwareRequest.txnkey)]:[3,8];case 7:return r=o.sent(),this.workerHandlers&&this.workerHandlers.forEach(function(e){e.call(null,Object.assign(r,{uid:t.data.uid}))}),[3,11];case 8:return i.Logger.getInstance().log("If response is False ==> Handle the error"),[4,this.handler.httpRespnseponseHandled(t.data.resp.body,t.data.uiRequest.PWHeader)];case 9:return a=o.sent(),[4,(new m.EndPointResponseHandler).dynamicRouterErrorHandle(a,t.data.resp.body,t.data.uiRequest)];case 10:s=o.sent(),this.workerHandlers&&this.workerHandlers.forEach(function(e){e.call(null,Object.assign(s,{uid:t.data.uid}))}),o.label=11;case 11:return[2]}})})}},e}();t.APIGateway=w},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return Object.defineProperty(e.prototype,"log",{get:function(){return this.isLogger?console.log.bind(this,"%clog ==>","color:"+this.colorLog("log")):function(){}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"info",{get:function(){return this.isLogger?console.info.bind(this,"%cinfo ==>","color:"+this.colorLog("info")):function(){}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"warn",{get:function(){return this.isLogger?console.warn.bind(this,"%cwarn ==>","color:"+this.colorLog("warn")):function(){}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"error",{get:function(){return this.isLogger?console.error.bind(this,"%cwarn ==>","color:"+this.colorLog("warn")):function(){}},enumerable:!0,configurable:!0}),e.prototype.setLogger=function(e){this.isLogger=e},e.prototype.colorLog=function(e,t){switch(t=t||"black",e){case"log":t="Green";break;case"info":t="DodgerBlue";break;case"error":t="Red";break;case"warn":t="Orange"}return t},e}();t.CustomConsole=r},function(e,t,n){(function(t){var n;e.exports=function e(t,r,o){function i(s,u){if(!r[s]){if(!t[s]){if(!u&&"function"==typeof n&&n)return n(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var l=r[s]={exports:{}};t[s][0].call(l.exports,function(e){var n=t[s][1][e];return i(n||e)},l,l.exports,e,t,r,o)}return r[s].exports}for(var a="function"==typeof n&&n,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,n,r){(function(e){"use strict";var t,r,o=e.MutationObserver||e.WebKitMutationObserver;if(o){var i=0,a=new o(l),s=e.document.createTextNode("");a.observe(s,{characterData:!0}),t=function(){s.data=i=++i%2}}else if(e.setImmediate||void 0===e.MessageChannel)t="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){l(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(l,0)};else{var u=new e.MessageChannel;u.port1.onmessage=l,t=function(){u.port2.postMessage(0)}}var c=[];function l(){var e,t;r=!0;for(var n=c.length;n;){for(t=c,c=[],e=-1;++e<n;)t[e]();n=c.length}r=!1}n.exports=function(e){1!==c.push(e)||r||t()}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,n){"use strict";var r=e(1);function o(){}var i={},a=["REJECTED"],s=["FULFILLED"],u=["PENDING"];function c(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,e!==o&&h(this,e)}function l(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function d(e,t,n){r(function(){var r;try{r=t(n)}catch(t){return i.reject(e,t)}r===e?i.reject(e,new TypeError("Cannot resolve promise with itself")):i.resolve(e,r)})}function p(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function h(e,t){var n=!1;function r(t){n||(n=!0,i.reject(e,t))}function o(t){n||(n=!0,i.resolve(e,t))}var a=f(function(){t(o,r)});"error"===a.status&&r(a.value)}function f(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}t.exports=c,c.prototype.catch=function(e){return this.then(null,e)},c.prototype.then=function(e,t){if("function"!=typeof e&&this.state===s||"function"!=typeof t&&this.state===a)return this;var n=new this.constructor(o);return this.state!==u?d(n,this.state===s?e:t,this.outcome):this.queue.push(new l(n,e,t)),n},l.prototype.callFulfilled=function(e){i.resolve(this.promise,e)},l.prototype.otherCallFulfilled=function(e){d(this.promise,this.onFulfilled,e)},l.prototype.callRejected=function(e){i.reject(this.promise,e)},l.prototype.otherCallRejected=function(e){d(this.promise,this.onRejected,e)},i.resolve=function(e,t){var n=f(p,t);if("error"===n.status)return i.reject(e,n.value);var r=n.value;if(r)h(e,r);else{e.state=s,e.outcome=t;for(var o=-1,a=e.queue.length;++o<a;)e.queue[o].callFulfilled(t)}return e},i.reject=function(e,t){e.state=a,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},c.resolve=function(e){return e instanceof this?e:i.resolve(new this(o),e)},c.reject=function(e){var t=new this(o);return i.reject(t,e)},c.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var a=new Array(n),s=0,u=-1,c=new this(o);++u<n;)l(e[u],u);return c;function l(e,o){t.resolve(e).then(function(e){a[o]=e,++s!==n||r||(r=!0,i.resolve(c,a))},function(e){r||(r=!0,i.reject(c,e))})}},c.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var a,s=-1,u=new this(o);++s<n;)a=e[s],t.resolve(a).then(function(e){r||(r=!0,i.resolve(u,e))},function(e){r||(r=!0,i.reject(u,e))});return u}},{1:1}],3:[function(e,n,r){(function(t){"use strict";"function"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function i(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(o){if("TypeError"!==o.name)throw o;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}"undefined"==typeof Promise&&e(3);var a=Promise;function s(e,t){t&&e.then(function(e){t(null,e)},function(e){t(e)})}function u(e,t,n){"function"==typeof t&&e.then(t),"function"==typeof n&&e.catch(n)}function c(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function l(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var d="local-forage-detect-blob-support",p=void 0,h={},f=Object.prototype.toString,g="readonly",y="readwrite";function v(e){return"boolean"==typeof p?a.resolve(p):function(e){return new a(function(t){var n=e.transaction(d,y),r=i([""]);n.objectStore(d).put(r,"key"),n.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},n.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)}}).catch(function(){return!1})}(e).then(function(e){return p=e})}function m(e){var t=h[e.name],n={};n.promise=new a(function(e,t){n.resolve=e,n.reject=t}),t.deferredOperations.push(n),t.dbReady?t.dbReady=t.dbReady.then(function(){return n.promise}):t.dbReady=n.promise}function w(e){var t=h[e.name].deferredOperations.pop();if(t)return t.resolve(),t.promise}function E(e,t){var n=h[e.name].deferredOperations.pop();if(n)return n.reject(t),n.promise}function I(e,t){return new a(function(n,r){if(h[e.name]=h[e.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},e.db){if(!t)return n(e.db);m(e),e.db.close()}var i=[e.name];t&&i.push(e.version);var a=o.open.apply(o,i);t&&(a.onupgradeneeded=function(t){var n=a.result;try{n.createObjectStore(e.storeName),t.oldVersion<=1&&n.createObjectStore(d)}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+e.name+'" has been upgraded from version '+t.oldVersion+" to version "+t.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),a.onerror=function(e){e.preventDefault(),r(a.error)},a.onsuccess=function(){n(a.result),w(e)}})}function b(e){return I(e,!1)}function S(e){return I(e,!0)}function P(e,t){if(!e.db)return!0;var n=!e.db.objectStoreNames.contains(e.storeName),r=e.version<e.db.version,o=e.version>e.db.version;if(r&&(e.version!==t&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),o||n){if(n){var i=e.db.version+1;i>e.version&&(e.version=i)}return!0}return!1}function A(e){return i([function(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),o=0;o<t;o++)r[o]=e.charCodeAt(o);return n}(atob(e.data))],{type:e.type})}function R(e){return e&&e.__local_forage_encoded_blob}function C(e){var t=this,n=t._initReady().then(function(){var e=h[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady});return u(n,e,e),n}function T(e,t,n,r){void 0===r&&(r=1);try{var o=e.db.transaction(e.storeName,t);n(null,o)}catch(o){if(r>0&&(!e.db||"InvalidStateError"===o.name||"NotFoundError"===o.name))return a.resolve().then(function(){if(!e.db||"NotFoundError"===o.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),S(e)}).then(function(){return function(e){m(e);for(var t=h[e.name],n=t.forages,r=0;r<n.length;r++){var o=n[r];o._dbInfo.db&&(o._dbInfo.db.close(),o._dbInfo.db=null)}return e.db=null,b(e).then(function(t){return e.db=t,P(e)?S(e):t}).then(function(r){e.db=t.db=r;for(var o=0;o<n.length;o++)n[o]._dbInfo.db=r}).catch(function(t){throw E(e,t),t})}(e).then(function(){T(e,t,n,r-1)})}).catch(n);n(o)}}var _={_driver:"asyncStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]=e[r];var o=h[n.name];o||(o={forages:[],db:null,dbReady:null,deferredOperations:[]},h[n.name]=o),o.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=C);var i=[];function s(){return a.resolve()}for(var u=0;u<o.forages.length;u++){var c=o.forages[u];c!==t&&i.push(c._initReady().catch(s))}var l=o.forages.slice(0);return a.all(i).then(function(){return n.db=o.db,b(n)}).then(function(e){return n.db=e,P(n,t._defaultConfig.version)?S(n):e}).then(function(e){n.db=o.db=e,t._dbInfo=n;for(var r=0;r<l.length;r++){var i=l[r];i!==t&&(i._dbInfo.db=n.db,i._dbInfo.version=n.version)}})},_support:function(){try{if(!o)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||t)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=new a(function(t,r){n.ready().then(function(){T(n._dbInfo,g,function(o,i){if(o)return r(o);try{var a=i.objectStore(n._dbInfo.storeName).openCursor(),s=1;a.onsuccess=function(){var n=a.result;if(n){var r=n.value;R(r)&&(r=A(r));var o=e(r,n.key,s++);void 0!==o?t(o):n.continue()}else t()},a.onerror=function(){r(a.error)}}catch(e){r(e)}})}).catch(r)});return s(r,t),r},getItem:function(e,t){var n=this;e=c(e);var r=new a(function(t,r){n.ready().then(function(){T(n._dbInfo,g,function(o,i){if(o)return r(o);try{var a=i.objectStore(n._dbInfo.storeName).get(e);a.onsuccess=function(){var e=a.result;void 0===e&&(e=null),R(e)&&(e=A(e)),t(e)},a.onerror=function(){r(a.error)}}catch(e){r(e)}})}).catch(r)});return s(r,t),r},setItem:function(e,t,n){var r=this;e=c(e);var o=new a(function(n,o){var i;r.ready().then(function(){return i=r._dbInfo,"[object Blob]"===f.call(t)?v(i.db).then(function(e){return e?t:(n=t,new a(function(e,t){var r=new FileReader;r.onerror=t,r.onloadend=function(t){var r=btoa(t.target.result||"");e({__local_forage_encoded_blob:!0,data:r,type:n.type})},r.readAsBinaryString(n)}));var n}):t}).then(function(t){T(r._dbInfo,y,function(i,a){if(i)return o(i);try{var s=a.objectStore(r._dbInfo.storeName);null===t&&(t=void 0);var u=s.put(t,e);a.oncomplete=function(){void 0===t&&(t=null),n(t)},a.onabort=a.onerror=function(){var e=u.error?u.error:u.transaction.error;o(e)}}catch(e){o(e)}})}).catch(o)});return s(o,n),o},removeItem:function(e,t){var n=this;e=c(e);var r=new a(function(t,r){n.ready().then(function(){T(n._dbInfo,y,function(o,i){if(o)return r(o);try{var a=i.objectStore(n._dbInfo.storeName).delete(e);i.oncomplete=function(){t()},i.onerror=function(){r(a.error)},i.onabort=function(){var e=a.error?a.error:a.transaction.error;r(e)}}catch(e){r(e)}})}).catch(r)});return s(r,t),r},clear:function(e){var t=this,n=new a(function(e,n){t.ready().then(function(){T(t._dbInfo,y,function(r,o){if(r)return n(r);try{var i=o.objectStore(t._dbInfo.storeName).clear();o.oncomplete=function(){e()},o.onabort=o.onerror=function(){var e=i.error?i.error:i.transaction.error;n(e)}}catch(e){n(e)}})}).catch(n)});return s(n,e),n},length:function(e){var t=this,n=new a(function(e,n){t.ready().then(function(){T(t._dbInfo,g,function(r,o){if(r)return n(r);try{var i=o.objectStore(t._dbInfo.storeName).count();i.onsuccess=function(){e(i.result)},i.onerror=function(){n(i.error)}}catch(e){n(e)}})}).catch(n)});return s(n,e),n},key:function(e,t){var n=this,r=new a(function(t,r){e<0?t(null):n.ready().then(function(){T(n._dbInfo,g,function(o,i){if(o)return r(o);try{var a=i.objectStore(n._dbInfo.storeName),s=!1,u=a.openCursor();u.onsuccess=function(){var n=u.result;n?0===e?t(n.key):s?t(n.key):(s=!0,n.advance(e)):t(null)},u.onerror=function(){r(u.error)}}catch(e){r(e)}})}).catch(r)});return s(r,t),r},keys:function(e){var t=this,n=new a(function(e,n){t.ready().then(function(){T(t._dbInfo,g,function(r,o){if(r)return n(r);try{var i=o.objectStore(t._dbInfo.storeName).openCursor(),a=[];i.onsuccess=function(){var t=i.result;t?(a.push(t.key),t.continue()):e(a)},i.onerror=function(){n(i.error)}}catch(e){n(e)}})}).catch(n)});return s(n,e),n},dropInstance:function(e,t){t=l.apply(this,arguments);var n,r=this.config();if((e="function"!=typeof e&&e||{}).name||(e.name=e.name||r.name,e.storeName=e.storeName||r.storeName),e.name){var i=e.name===r.name&&this._dbInfo.db?a.resolve(this._dbInfo.db):b(e).then(function(t){var n=h[e.name],r=n.forages;n.db=t;for(var o=0;o<r.length;o++)r[o]._dbInfo.db=t;return t});n=e.storeName?i.then(function(t){if(t.objectStoreNames.contains(e.storeName)){var n=t.version+1;m(e);var r=h[e.name],i=r.forages;t.close();for(var s=0;s<i.length;s++){var u=i[s];u._dbInfo.db=null,u._dbInfo.version=n}return new a(function(t,r){var i=o.open(e.name,n);i.onerror=function(e){i.result.close(),r(e)},i.onupgradeneeded=function(){i.result.deleteObjectStore(e.storeName)},i.onsuccess=function(){var e=i.result;e.close(),t(e)}}).then(function(e){r.db=e;for(var t=0;t<i.length;t++){var n=i[t];n._dbInfo.db=e,w(n._dbInfo)}}).catch(function(t){throw(E(e,t)||a.resolve()).catch(function(){}),t})}}):i.then(function(t){m(e);var n=h[e.name],r=n.forages;t.close();for(var i=0;i<r.length;i++)r[i]._dbInfo.db=null;return new a(function(t,n){var r=o.deleteDatabase(e.name);r.onerror=r.onblocked=function(e){var t=r.result;t&&t.close(),n(e)},r.onsuccess=function(){var e=r.result;e&&e.close(),t(e)}}).then(function(e){n.db=e;for(var t=0;t<r.length;t++)w(r[t]._dbInfo)}).catch(function(t){throw(E(e,t)||a.resolve()).catch(function(){}),t})})}else n=a.reject("Invalid arguments");return s(n,t),n}},O="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",B="~~local_forage_type~",D=/^~~local_forage_type~([^~]+)~/,k="__lfsc__:",x=k.length,N="arbf",L="blob",M="si08",q="ui08",H="uic8",U="si16",W="si32",F="ur16",j="ui32",V="fl32",K="fl64",G=x+N.length,z=Object.prototype.toString;function J(e){var t,n,r,o,i,a=.75*e.length,s=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var c=new ArrayBuffer(a),l=new Uint8Array(c);for(t=0;t<s;t+=4)n=O.indexOf(e[t]),r=O.indexOf(e[t+1]),o=O.indexOf(e[t+2]),i=O.indexOf(e[t+3]),l[u++]=n<<2|r>>4,l[u++]=(15&r)<<4|o>>2,l[u++]=(3&o)<<6|63&i;return c}function X(e){var t,n=new Uint8Array(e),r="";for(t=0;t<n.length;t+=3)r+=O[n[t]>>2],r+=O[(3&n[t])<<4|n[t+1]>>4],r+=O[(15&n[t+1])<<2|n[t+2]>>6],r+=O[63&n[t+2]];return n.length%3==2?r=r.substring(0,r.length-1)+"=":n.length%3==1&&(r=r.substring(0,r.length-2)+"=="),r}var Y={serialize:function(e,t){var n="";if(e&&(n=z.call(e)),e&&("[object ArrayBuffer]"===n||e.buffer&&"[object ArrayBuffer]"===z.call(e.buffer))){var r,o=k;e instanceof ArrayBuffer?(r=e,o+=N):(r=e.buffer,"[object Int8Array]"===n?o+=M:"[object Uint8Array]"===n?o+=q:"[object Uint8ClampedArray]"===n?o+=H:"[object Int16Array]"===n?o+=U:"[object Uint16Array]"===n?o+=F:"[object Int32Array]"===n?o+=W:"[object Uint32Array]"===n?o+=j:"[object Float32Array]"===n?o+=V:"[object Float64Array]"===n?o+=K:t(new Error("Failed to get type for BinaryArray"))),t(o+X(r))}else if("[object Blob]"===n){var i=new FileReader;i.onload=function(){var n=B+e.type+"~"+X(this.result);t(k+L+n)},i.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(n){console.error("Couldn't convert value into a JSON string: ",e),t(null,n)}},deserialize:function(e){if(e.substring(0,x)!==k)return JSON.parse(e);var t,n=e.substring(G),r=e.substring(x,G);if(r===L&&D.test(n)){var o=n.match(D);t=o[1],n=n.substring(o[0].length)}var a=J(n);switch(r){case N:return a;case L:return i([a],{type:t});case M:return new Int8Array(a);case q:return new Uint8Array(a);case H:return new Uint8ClampedArray(a);case U:return new Int16Array(a);case F:return new Uint16Array(a);case W:return new Int32Array(a);case j:return new Uint32Array(a);case V:return new Float32Array(a);case K:return new Float64Array(a);default:throw new Error("Unkown type: "+r)}},stringToBuffer:J,bufferToString:X};function Z(e,t,n,r){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,r)}function Q(e,t,n,r,o,i){e.executeSql(n,r,o,function(e,a){a.code===a.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[t.storeName],function(e,s){s.rows.length?i(e,a):Z(e,t,function(){e.executeSql(n,r,o,i)},i)},i):i(e,a)},i)}function $(e,t,n,r){var o=this;e=c(e);var i=new a(function(i,a){o.ready().then(function(){void 0===t&&(t=null);var s=t,u=o._dbInfo;u.serializer.serialize(t,function(t,c){c?a(c):u.db.transaction(function(n){Q(n,u,"INSERT OR REPLACE INTO "+u.storeName+" (key, value) VALUES (?, ?)",[e,t],function(){i(s)},function(e,t){a(t)})},function(t){if(t.code===t.QUOTA_ERR){if(r>0)return void i($.apply(o,[e,s,n,r-1]));a(t)}})})}).catch(a)});return s(i,n),i}var ee={_driver:"webSQLStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]="string"!=typeof e[r]?e[r].toString():e[r];var o=new a(function(e,r){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(e){return r(e)}n.db.transaction(function(o){Z(o,n,function(){t._dbInfo=n,e()},function(e,t){r(t)})},r)});return n.serializer=Y,o},_support:"function"==typeof openDatabase,iterate:function(e,t){var n=this,r=new a(function(t,r){n.ready().then(function(){var o=n._dbInfo;o.db.transaction(function(n){Q(n,o,"SELECT * FROM "+o.storeName,[],function(n,r){for(var i=r.rows,a=i.length,s=0;s<a;s++){var u=i.item(s),c=u.value;if(c&&(c=o.serializer.deserialize(c)),void 0!==(c=e(c,u.key,s+1)))return void t(c)}t()},function(e,t){r(t)})})}).catch(r)});return s(r,t),r},getItem:function(e,t){var n=this;e=c(e);var r=new a(function(t,r){n.ready().then(function(){var o=n._dbInfo;o.db.transaction(function(n){Q(n,o,"SELECT * FROM "+o.storeName+" WHERE key = ? LIMIT 1",[e],function(e,n){var r=n.rows.length?n.rows.item(0).value:null;r&&(r=o.serializer.deserialize(r)),t(r)},function(e,t){r(t)})})}).catch(r)});return s(r,t),r},setItem:function(e,t,n){return $.apply(this,[e,t,n,1])},removeItem:function(e,t){var n=this;e=c(e);var r=new a(function(t,r){n.ready().then(function(){var o=n._dbInfo;o.db.transaction(function(n){Q(n,o,"DELETE FROM "+o.storeName+" WHERE key = ?",[e],function(){t()},function(e,t){r(t)})})}).catch(r)});return s(r,t),r},clear:function(e){var t=this,n=new a(function(e,n){t.ready().then(function(){var r=t._dbInfo;r.db.transaction(function(t){Q(t,r,"DELETE FROM "+r.storeName,[],function(){e()},function(e,t){n(t)})})}).catch(n)});return s(n,e),n},length:function(e){var t=this,n=new a(function(e,n){t.ready().then(function(){var r=t._dbInfo;r.db.transaction(function(t){Q(t,r,"SELECT COUNT(key) as c FROM "+r.storeName,[],function(t,n){var r=n.rows.item(0).c;e(r)},function(e,t){n(t)})})}).catch(n)});return s(n,e),n},key:function(e,t){var n=this,r=new a(function(t,r){n.ready().then(function(){var o=n._dbInfo;o.db.transaction(function(n){Q(n,o,"SELECT key FROM "+o.storeName+" WHERE id = ? LIMIT 1",[e+1],function(e,n){var r=n.rows.length?n.rows.item(0).key:null;t(r)},function(e,t){r(t)})})}).catch(r)});return s(r,t),r},keys:function(e){var t=this,n=new a(function(e,n){t.ready().then(function(){var r=t._dbInfo;r.db.transaction(function(t){Q(t,r,"SELECT key FROM "+r.storeName,[],function(t,n){for(var r=[],o=0;o<n.rows.length;o++)r.push(n.rows.item(o).key);e(r)},function(e,t){n(t)})})}).catch(n)});return s(n,e),n},dropInstance:function(e,t){t=l.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,o=this;return s(r=e.name?new a(function(t){var r;r=e.name===n.name?o._dbInfo.db:openDatabase(e.name,"","",0),e.storeName?t({db:r,storeNames:[e.storeName]}):t(function(e){return new a(function(t,n){e.transaction(function(r){r.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],function(n,r){for(var o=[],i=0;i<r.rows.length;i++)o.push(r.rows.item(i).name);t({db:e,storeNames:o})},function(e,t){n(t)})},function(e){n(e)})})}(r))}).then(function(e){return new a(function(t,n){e.db.transaction(function(r){function o(e){return new a(function(t,n){r.executeSql("DROP TABLE IF EXISTS "+e,[],function(){t()},function(e,t){n(t)})})}for(var i=[],s=0,u=e.storeNames.length;s<u;s++)i.push(o(e.storeNames[s]));a.all(i).then(function(){t()}).catch(function(e){n(e)})},function(e){n(e)})})}):a.reject("Invalid arguments"),t),r}};function te(e,t){var n=e.name+"/";return e.storeName!==t.storeName&&(n+=e.storeName+"/"),n}function ne(){return!function(){try{return localStorage.setItem("_localforage_support_test",!0),localStorage.removeItem("_localforage_support_test"),!1}catch(e){return!0}}()||localStorage.length>0}var re={_driver:"localStorageWrapper",_initStorage:function(e){var t={};if(e)for(var n in e)t[n]=e[n];return t.keyPrefix=te(e,this._defaultConfig),ne()?(this._dbInfo=t,t.serializer=Y,a.resolve()):a.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=n.ready().then(function(){for(var t=n._dbInfo,r=t.keyPrefix,o=r.length,i=localStorage.length,a=1,s=0;s<i;s++){var u=localStorage.key(s);if(0===u.indexOf(r)){var c=localStorage.getItem(u);if(c&&(c=t.serializer.deserialize(c)),void 0!==(c=e(c,u.substring(o),a++)))return c}}});return s(r,t),r},getItem:function(e,t){var n=this;e=c(e);var r=n.ready().then(function(){var t=n._dbInfo,r=localStorage.getItem(t.keyPrefix+e);return r&&(r=t.serializer.deserialize(r)),r});return s(r,t),r},setItem:function(e,t,n){var r=this;e=c(e);var o=r.ready().then(function(){void 0===t&&(t=null);var n=t;return new a(function(o,i){var a=r._dbInfo;a.serializer.serialize(t,function(t,r){if(r)i(r);else try{localStorage.setItem(a.keyPrefix+e,t),o(n)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||i(e),i(e)}})})});return s(o,n),o},removeItem:function(e,t){var n=this;e=c(e);var r=n.ready().then(function(){var t=n._dbInfo;localStorage.removeItem(t.keyPrefix+e)});return s(r,t),r},clear:function(e){var t=this,n=t.ready().then(function(){for(var e=t._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var r=localStorage.key(n);0===r.indexOf(e)&&localStorage.removeItem(r)}});return s(n,e),n},length:function(e){var t=this.keys().then(function(e){return e.length});return s(t,e),t},key:function(e,t){var n=this,r=n.ready().then(function(){var t,r=n._dbInfo;try{t=localStorage.key(e)}catch(e){t=null}return t&&(t=t.substring(r.keyPrefix.length)),t});return s(r,t),r},keys:function(e){var t=this,n=t.ready().then(function(){for(var e=t._dbInfo,n=localStorage.length,r=[],o=0;o<n;o++){var i=localStorage.key(o);0===i.indexOf(e.keyPrefix)&&r.push(i.substring(e.keyPrefix.length))}return r});return s(n,e),n},dropInstance:function(e,t){if(t=l.apply(this,arguments),!(e="function"!=typeof e&&e||{}).name){var n=this.config();e.name=e.name||n.name,e.storeName=e.storeName||n.storeName}var r,o=this;return s(r=e.name?new a(function(t){e.storeName?t(te(e,o._defaultConfig)):t(e.name+"/")}).then(function(e){for(var t=localStorage.length-1;t>=0;t--){var n=localStorage.key(t);0===n.indexOf(e)&&localStorage.removeItem(n)}}):a.reject("Invalid arguments"),t),r}},oe=function(e,t){for(var n,r,o=e.length,i=0;i<o;){if((n=e[i])===(r=t)||"number"==typeof n&&"number"==typeof r&&isNaN(n)&&isNaN(r))return!0;i++}return!1},ie=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},ae={},se={},ue={INDEXEDDB:_,WEBSQL:ee,LOCALSTORAGE:re},ce=[ue.INDEXEDDB._driver,ue.WEBSQL._driver,ue.LOCALSTORAGE._driver],le=["dropInstance"],de=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(le),pe={description:"",driver:ce.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function he(e,t){e[t]=function(){var n=arguments;return e.ready().then(function(){return e[t].apply(e,n)})}}function fe(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var n in t)t.hasOwnProperty(n)&&(ie(t[n])?arguments[0][n]=t[n].slice():arguments[0][n]=t[n])}return arguments[0]}var ge=new(function(){function e(t){for(var n in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),ue)if(ue.hasOwnProperty(n)){var r=ue[n],o=r._driver;this[n]=o,ae[o]||this.defineDriver(r)}this._defaultConfig=fe({},pe),this._config=fe({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){})}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":r(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var t in e){if("storeName"===t&&(e[t]=e[t].replace(/\W/g,"_")),"version"===t&&"number"!=typeof e[t])return new Error("Database version must be a number.");this._config[t]=e[t]}return!("driver"in e&&e.driver)||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,t,n){var r=new a(function(t,n){try{var r=e._driver,o=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!e._driver)return void n(o);for(var i=de.concat("_initStorage"),u=0,c=i.length;u<c;u++){var l=i[u];if((!oe(le,l)||e[l])&&"function"!=typeof e[l])return void n(o)}!function(){for(var t=function(e){return function(){var t=new Error("Method "+e+" is not implemented by the current driver"),n=a.reject(t);return s(n,arguments[arguments.length-1]),n}},n=0,r=le.length;n<r;n++){var o=le[n];e[o]||(e[o]=t(o))}}();var d=function(n){ae[r]&&console.info("Redefining LocalForage driver: "+r),ae[r]=e,se[r]=n,t()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(d,n):d(!!e._support):d(!0)}catch(e){n(e)}});return u(r,t,n),r},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,t,n){var r=ae[e]?a.resolve(ae[e]):a.reject(new Error("Driver not found."));return u(r,t,n),r},e.prototype.getSerializer=function(e){var t=a.resolve(Y);return u(t,e),t},e.prototype.ready=function(e){var t=this,n=t._driverSet.then(function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready});return u(n,e,e),n},e.prototype.setDriver=function(e,t,n){var r=this;ie(e)||(e=[e]);var o=this._getSupportedDrivers(e);function i(){r._config.driver=r.driver()}function s(e){return r._extend(e),i(),r._ready=r._initStorage(r._config),r._ready}var c=null!==this._driverSet?this._driverSet.catch(function(){return a.resolve()}):a.resolve();return this._driverSet=c.then(function(){var e=o[0];return r._dbInfo=null,r._ready=null,r.getDriver(e).then(function(e){r._driver=e._driver,i(),r._wrapLibraryMethodsWithReady(),r._initDriver=function(e){return function(){var t=0;return function n(){for(;t<e.length;){var o=e[t];return t++,r._dbInfo=null,r._ready=null,r.getDriver(o).then(s).catch(n)}i();var u=new Error("No available storage method found.");return r._driverSet=a.reject(u),r._driverSet}()}}(o)})}).catch(function(){i();var e=new Error("No available storage method found.");return r._driverSet=a.reject(e),r._driverSet}),u(this._driverSet,t,n),this._driverSet},e.prototype.supports=function(e){return!!se[e]},e.prototype._extend=function(e){fe(this,e)},e.prototype._getSupportedDrivers=function(e){for(var t=[],n=0,r=e.length;n<r;n++){var o=e[n];this.supports(o)&&t.push(o)}return t},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,t=de.length;e<t;e++)he(this,de[e])},e.prototype.createInstance=function(t){return new e(t)},e}());t.exports=ge},{3:3}]},{},[4])(4)}).call(this,n(15))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.encryption=e}return e.prototype.aesUtil=function(e,t){this.keySize=e/32,this.iterationCount=t},e.prototype.generateKey=function(e,t){return this.key=this.encryption.PBKDF2(t,this.encryption.enc.Hex.parse(e),{keySize:this.keySize,iterations:this.iterationCount}),this.key},e.prototype.encrypt=function(e,t,n,r){this.key=this.generateKey(e,n),this.encrypted=this.encryption.AES.encrypt(r,this.key,{iv:this.encryption.enc.Hex.parse(t)});try{return this.encrypted.ciphertext.toString(this.encryption.enc.Base64)}catch(e){throw e}},e.prototype.decrypt=function(e,t,n,r){this.key=this.generateKey(e,n);var o=this.encryption.lib.CipherParams.create({ciphertext:this.encryption.enc.Base64.parse(r)});this.decrypted=this.encryption.AES.decrypt(o,this.key,{iv:this.encryption.enc.Hex.parse(t)});try{return this.decrypted.toString(this.encryption.enc.Utf8)}catch(e){throw e}},e.prototype.encryptText=function(e,t){var n=t;return this.aesUtil(256,100),this.encrypt("00000000000000000000000000000000","00000000000000000000000000000000",n,e)},e.prototype.decryptText=function(e,t){var n=t;return this.aesUtil(256,100),this.decrypt("00000000000000000000000000000000","00000000000000000000000000000000",n,e)},e.prototype.getHexString=function(e){return this.hexString=this.encryption.enc.Hex.parse("39563JSHUSJNS18"),this.hexString},e.prototype.getEncryption=function(e,t){return this.encryptedString=this.encryptText(e,t),this.encryptedString},e.prototype.getDecryption=function(e,t){return this.decryptedString=this.decryptText(e,t),void 0!==this.decryptedString?this.decryptedString:""},e.prototype.getHashValue=function(e,t){return this.hash=this.encryption.HmacSHA512(e,t).toString(),this.hash},e}();t.AESEncryption=r},function(e,t){!function(e,t){for(var n in t)e[n]=t[n]}(window,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RSAKey=void 0,t.parseBigInt=i;var r=n(8),o=n(10);function i(e,t){return new r.BigInteger(e,t)}var a=t.RSAKey=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null};a.prototype.doPublic=function(e){return e.modPowInt(this.e,this.n)},a.prototype.setPublic=function(e,t){null!=e&&null!=t&&e.length>0&&t.length>0?(this.n=i(e,16),this.e=parseInt(t,16)):console.error("Invalid RSA public key")},a.prototype.encrypt=function(e){var t=function(e,t){if(t<e.length+11)return console.error("Message too long for RSA"),null;for(var n=[],i=e.length-1;i>=0&&t>0;){var a=e.charCodeAt(i--);a<128?n[--t]=a:a>127&&a<2048?(n[--t]=63&a|128,n[--t]=a>>6|192):(n[--t]=63&a|128,n[--t]=a>>6&63|128,n[--t]=a>>12|224)}n[--t]=0;for(var s=new o.SecureRandom,u=[];t>2;){for(u[0]=0;0==u[0];)s.nextBytes(u);n[--t]=u[0]}return n[--t]=2,n[--t]=0,new r.BigInteger(n)}(e,this.n.bitLength()+7>>3);if(null==t)return null;var n=this.doPublic(t);if(null==n)return null;var i=n.toString(16);return 0==(1&i.length)?i:"0"+i}},function(e,t,n){var r,o,i;e.exports=(i=i||function(e,t){var n=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),r={},o=r.lib={},i=o.Base={extend:function(e){var t=n(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},a=o.WordArray=i.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||u).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,o=e.sigBytes;if(this.clamp(),r%4)for(var i=0;i<o;i++){var a=n[i>>>2]>>>24-i%4*8&255;t[r+i>>>2]|=a<<24-(r+i)%4*8}else for(i=0;i<o;i+=4)t[r+i>>>2]=n[i>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=i.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var n,r=[],o=function(t){t=t;var n=987654321,r=4294967295;return function(){var o=((n=36969*(65535&n)+(n>>16)&r)<<16)+(t=18e3*(65535&t)+(t>>16)&r)&r;return o/=4294967296,(o+=.5)*(e.random()>.5?1:-1)}},i=0;i<t;i+=4){var s=o(4294967296*(n||e.random()));n=987654071*s(),r.push(4294967296*s()|0)}return new a.init(r,t)}}),s=r.enc={},u=s.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push((i>>>4).toString(16)),r.push((15&i).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new a.init(n,t/2)}},c=s.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push(String.fromCharCode(i))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new a.init(n,t)}},l=s.Utf8={stringify:function(e){try{return decodeURIComponent(escape(c.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return c.parse(unescape(encodeURIComponent(e)))}},d=o.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new a.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=l.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n=this._data,r=n.words,o=n.sigBytes,i=this.blockSize,s=o/(4*i),u=(s=t?e.ceil(s):e.max((0|s)-this._minBufferSize,0))*i,c=e.min(4*u,o);if(u){for(var l=0;l<u;l+=i)this._doProcessBlock(r,l);var d=r.splice(0,u);n.sigBytes-=c}return new a.init(d,c)},clone:function(){var e=i.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),p=(o.Hasher=d.extend({cfg:i.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new p.HMAC.init(e,n).finalize(t)}}}),r.algo={});return r}(Math),o=(r=i).lib.WordArray,r.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,r=this._map;e.clamp();for(var o=[],i=0;i<n;i+=3)for(var a=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,s=0;s<4&&i+.75*s<n;s++)o.push(r.charAt(a>>>6*(3-s)&63));var u=r.charAt(64);if(u)for(;o.length%4;)o.push(u);return o.join("")},parse:function(e){var t=e.length,n=this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var i=0;i<n.length;i++)r[n.charCodeAt(i)]=i}var a=n.charAt(64);if(a){var s=e.indexOf(a);-1!==s&&(t=s)}return function(e,t,n){for(var r=[],i=0,a=0;a<t;a++)if(a%4){var s=n[e.charCodeAt(a-1)]<<a%4*2,u=n[e.charCodeAt(a)]>>>6-a%4*2;r[i>>>2]|=(s|u)<<24-i%4*8,i++}return o.create(r,i)}(e,t,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},function(){var e=i,t=e.lib.Base,n=e.enc.Utf8;e.algo.HMAC=t.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=n.parse(t));var r=e.blockSize,o=4*r;t.sigBytes>o&&(t=e.finalize(t)),t.clamp();for(var i=this._oKey=t.clone(),a=this._iKey=t.clone(),s=i.words,u=a.words,c=0;c<r;c++)s[c]^=1549556828,u[c]^=909522486;i.sigBytes=a.sigBytes=o,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,n=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(n))}})}(),function(){var e=i,t=e.lib,n=t.WordArray,r=t.Hasher,o=e.algo,a=[],s=o.SHA1=r.extend({_doReset:function(){this._hash=new n.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=this._hash.words,r=n[0],o=n[1],i=n[2],s=n[3],u=n[4],c=0;c<80;c++){if(c<16)a[c]=0|e[t+c];else{var l=a[c-3]^a[c-8]^a[c-14]^a[c-16];a[c]=l<<1|l>>>31}var d=(r<<5|r>>>27)+u+a[c];d+=c<20?1518500249+(o&i|~o&s):c<40?1859775393+(o^i^s):c<60?(o&i|o&s|i&s)-1894007588:(o^i^s)-899497514,u=s,s=i,i=o<<30|o>>>2,o=r,r=d}n[0]=n[0]+r|0,n[1]=n[1]+o|0,n[2]=n[2]+i|0,n[3]=n[3]+s|0,n[4]=n[4]+u|0},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,r=8*e.sigBytes;return t[r>>>5]|=128<<24-r%32,t[14+(r+64>>>9<<4)]=Math.floor(n/4294967296),t[15+(r+64>>>9<<4)]=n,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e}});e.SHA1=r._createHelper(s),e.HmacSHA1=r._createHmacHelper(s)}(),function(){var e=i,t=e.lib,n=t.Base,r=t.WordArray,o=e.algo,a=o.SHA1,s=o.HMAC,u=o.PBKDF2=n.extend({cfg:n.extend({keySize:4,hasher:a,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var n=this.cfg,o=s.create(n.hasher,e),i=r.create(),a=r.create([1]),u=i.words,c=a.words,l=n.keySize,d=n.iterations;u.length<l;){var p=o.update(t).finalize(a);o.reset();for(var h=p.words,f=h.length,g=p,y=1;y<d;y++){g=o.finalize(g),o.reset();for(var v=g.words,m=0;m<f;m++)h[m]^=v[m]}i.concat(p),c[0]++}return i.sigBytes=4*l,i}});e.PBKDF2=function(e,t,n){return u.create(n).compute(e,t)}}(),function(e){var t=i,n=t.lib,r=n.Base,o=n.WordArray,a=t.x64={};a.Word=r.extend({init:function(e,t){this.high=e,this.low=t}}),a.WordArray=r.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:8*e.length},toX32:function(){for(var e=this.words,t=e.length,n=[],r=0;r<t;r++){var i=e[r];n.push(i.high),n.push(i.low)}return o.create(n,this.sigBytes)},clone:function(){for(var e=r.clone.call(this),t=e.words=this.words.slice(0),n=t.length,o=0;o<n;o++)t[o]=t[o].clone();return e}})}(),function(){var e=i,t=e.lib.Hasher,n=e.x64,r=n.Word,o=n.WordArray,a=e.algo;function s(){return r.create.apply(r,arguments)}var u=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],c=[];!function(){for(var e=0;e<80;e++)c[e]=s()}();var l=a.SHA512=t.extend({_doReset:function(){this._hash=new o.init([new r.init(1779033703,4089235720),new r.init(3144134277,2227873595),new r.init(1013904242,4271175723),new r.init(2773480762,1595750129),new r.init(1359893119,2917565137),new r.init(2600822924,725511199),new r.init(528734635,4215389547),new r.init(1541459225,327033209)])},_doProcessBlock:function(e,t){for(var n=this._hash.words,r=n[0],o=n[1],i=n[2],a=n[3],s=n[4],l=n[5],d=n[6],p=n[7],h=r.high,f=r.low,g=o.high,y=o.low,v=i.high,m=i.low,w=a.high,E=a.low,I=s.high,b=s.low,S=l.high,P=l.low,A=d.high,R=d.low,C=p.high,T=p.low,_=h,O=f,B=g,D=y,k=v,x=m,N=w,L=E,M=I,q=b,H=S,U=P,W=A,F=R,j=C,V=T,K=0;K<80;K++){var G=c[K];if(K<16)var z=G.high=0|e[t+2*K],J=G.low=0|e[t+2*K+1];else{var X=c[K-15],Y=X.high,Z=X.low,Q=(Y>>>1|Z<<31)^(Y>>>8|Z<<24)^Y>>>7,$=(Z>>>1|Y<<31)^(Z>>>8|Y<<24)^(Z>>>7|Y<<25),ee=c[K-2],te=ee.high,ne=ee.low,re=(te>>>19|ne<<13)^(te<<3|ne>>>29)^te>>>6,oe=(ne>>>19|te<<13)^(ne<<3|te>>>29)^(ne>>>6|te<<26),ie=c[K-7],ae=ie.high,se=ie.low,ue=c[K-16],ce=ue.high,le=ue.low;z=(z=(z=Q+ae+((J=$+se)>>>0<$>>>0?1:0))+re+((J+=oe)>>>0<oe>>>0?1:0))+ce+((J+=le)>>>0<le>>>0?1:0),G.high=z,G.low=J}var de,pe=M&H^~M&W,he=q&U^~q&F,fe=_&B^_&k^B&k,ge=O&D^O&x^D&x,ye=(_>>>28|O<<4)^(_<<30|O>>>2)^(_<<25|O>>>7),ve=(O>>>28|_<<4)^(O<<30|_>>>2)^(O<<25|_>>>7),me=(M>>>14|q<<18)^(M>>>18|q<<14)^(M<<23|q>>>9),we=(q>>>14|M<<18)^(q>>>18|M<<14)^(q<<23|M>>>9),Ee=u[K],Ie=Ee.high,be=Ee.low,Se=j+me+((de=V+we)>>>0<V>>>0?1:0),Pe=ve+ge;j=W,V=F,W=H,F=U,H=M,U=q,M=N+(Se=(Se=(Se=Se+pe+((de+=he)>>>0<he>>>0?1:0))+Ie+((de+=be)>>>0<be>>>0?1:0))+z+((de+=J)>>>0<J>>>0?1:0))+((q=L+de|0)>>>0<L>>>0?1:0)|0,N=k,L=x,k=B,x=D,B=_,D=O,_=Se+(ye+fe+(Pe>>>0<ve>>>0?1:0))+((O=de+Pe|0)>>>0<de>>>0?1:0)|0}f=r.low=f+O,r.high=h+_+(f>>>0<O>>>0?1:0),y=o.low=y+D,o.high=g+B+(y>>>0<D>>>0?1:0),m=i.low=m+x,i.high=v+k+(m>>>0<x>>>0?1:0),E=a.low=E+L,a.high=w+N+(E>>>0<L>>>0?1:0),b=s.low=b+q,s.high=I+M+(b>>>0<q>>>0?1:0),P=l.low=P+U,l.high=S+H+(P>>>0<U>>>0?1:0),R=d.low=R+F,d.high=A+W+(R>>>0<F>>>0?1:0),T=p.low=T+V,p.high=C+j+(T>>>0<V>>>0?1:0)},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,r=8*e.sigBytes;return t[r>>>5]|=128<<24-r%32,t[30+(r+128>>>10<<5)]=Math.floor(n/4294967296),t[31+(r+128>>>10<<5)]=n,e.sigBytes=4*t.length,this._process(),this._hash.toX32()},clone:function(){var e=t.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32});e.SHA512=t._createHelper(l),e.HmacSHA512=t._createHmacHelper(l)}(),i.lib.Cipher||function(e){var t=i,n=t.lib,r=n.Base,o=n.WordArray,a=n.BufferedBlockAlgorithm,s=t.enc,u=(s.Utf8,s.Base64),c=t.algo.EvpKDF,l=n.Cipher=a.extend({cfg:r.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,n){this.cfg=this.cfg.extend(n),this._xformMode=e,this._key=t,this.reset()},reset:function(){a.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function e(e){return"string"==typeof e?w:v}return function(t){return{encrypt:function(n,r,o){return e(r).encrypt(t,n,r,o)},decrypt:function(n,r,o){return e(r).decrypt(t,n,r,o)}}}}()}),d=(n.StreamCipher=l.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),t.mode={}),p=n.BlockCipherMode=r.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}}),h=d.CBC=function(){var t=p.extend();function n(t,n,r){var o=this._iv;if(o){var i=o;this._iv=e}else i=this._prevBlock;for(var a=0;a<r;a++)t[n+a]^=i[a]}return t.Encryptor=t.extend({processBlock:function(e,t){var r=this._cipher,o=r.blockSize;n.call(this,e,t,o),r.encryptBlock(e,t),this._prevBlock=e.slice(t,t+o)}}),t.Decryptor=t.extend({processBlock:function(e,t){var r=this._cipher,o=r.blockSize,i=e.slice(t,t+o);r.decryptBlock(e,t),n.call(this,e,t,o),this._prevBlock=i}}),t}(),f=(t.pad={}).Pkcs7={pad:function(e,t){for(var n=4*t,r=n-e.sigBytes%n,i=r<<24|r<<16|r<<8|r,a=[],s=0;s<r;s+=4)a.push(i);var u=o.create(a,r);e.concat(u)},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},g=(n.BlockCipher=l.extend({cfg:l.cfg.extend({mode:h,padding:f}),reset:function(){l.reset.call(this);var e=this.cfg,t=e.iv,n=e.mode;if(this._xformMode==this._ENC_XFORM_MODE)var r=n.createEncryptor;else r=n.createDecryptor,this._minBufferSize=1;this._mode&&this._mode.__creator==r?this._mode.init(this,t&&t.words):(this._mode=r.call(n,this,t&&t.words),this._mode.__creator=r)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){e.pad(this._data,this.blockSize);var t=this._process(!0)}else t=this._process(!0),e.unpad(t);return t},blockSize:4}),n.CipherParams=r.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}})),y=(t.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext,n=e.salt;if(n)var r=o.create([1398893684,1701076831]).concat(n).concat(t);else r=t;return r.toString(u)},parse:function(e){var t=u.parse(e),n=t.words;if(1398893684==n[0]&&1701076831==n[1]){var r=o.create(n.slice(2,4));n.splice(0,4),t.sigBytes-=16}return g.create({ciphertext:t,salt:r})}},v=n.SerializableCipher=r.extend({cfg:r.extend({format:y}),encrypt:function(e,t,n,r){r=this.cfg.extend(r);var o=e.createEncryptor(n,r),i=o.finalize(t),a=o.cfg;return g.create({ciphertext:i,key:n,iv:a.iv,algorithm:e,mode:a.mode,padding:a.padding,blockSize:e.blockSize,formatter:r.format})},decrypt:function(e,t,n,r){return r=this.cfg.extend(r),t=this._parse(t,r.format),e.createDecryptor(n,r).finalize(t.ciphertext)},_parse:function(e,t){return"string"==typeof e?t.parse(e,this):e}}),m=(t.kdf={}).OpenSSL={execute:function(e,t,n,r){r||(r=o.random(8));var i=c.create({keySize:t+n}).compute(e,r),a=o.create(i.words.slice(t),4*n);return i.sigBytes=4*t,g.create({key:i,iv:a,salt:r})}},w=n.PasswordBasedCipher=v.extend({cfg:v.cfg.extend({kdf:m}),encrypt:function(e,t,n,r){var o=(r=this.cfg.extend(r)).kdf.execute(n,e.keySize,e.ivSize);r.iv=o.iv;var i=v.encrypt.call(this,e,t,o.key,r);return i.mixIn(o),i},decrypt:function(e,t,n,r){r=this.cfg.extend(r),t=this._parse(t,r.format);var o=r.kdf.execute(n,e.keySize,e.ivSize,t.salt);return r.iv=o.iv,v.decrypt.call(this,e,t,o.key,r)}})}(),function(){var e=i,t=e.lib.BlockCipher,n=e.algo,r=[],o=[],a=[],s=[],u=[],c=[],l=[],d=[],p=[],h=[];!function(){for(var e=[],t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;var n=0,i=0;for(t=0;t<256;t++){var f=i^i<<1^i<<2^i<<3^i<<4;f=f>>>8^255&f^99,r[n]=f,o[f]=n;var g=e[n],y=e[g],v=e[y],m=257*e[f]^16843008*f;a[n]=m<<24|m>>>8,s[n]=m<<16|m>>>16,u[n]=m<<8|m>>>24,c[n]=m,m=16843009*v^65537*y^257*g^16843008*n,l[f]=m<<24|m>>>8,d[f]=m<<16|m>>>16,p[f]=m<<8|m>>>24,h[f]=m,n?(n=g^e[e[e[v^g]]],i^=e[e[i]]):n=i=1}}();var f=[0,1,2,4,8,16,32,64,128,27,54],g=n.AES=t.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var e=this._keyPriorReset=this._key,t=e.words,n=e.sigBytes/4,o=4*((this._nRounds=n+6)+1),i=this._keySchedule=[],a=0;a<o;a++)if(a<n)i[a]=t[a];else{var s=i[a-1];a%n?n>6&&a%n==4&&(s=r[s>>>24]<<24|r[s>>>16&255]<<16|r[s>>>8&255]<<8|r[255&s]):(s=r[(s=s<<8|s>>>24)>>>24]<<24|r[s>>>16&255]<<16|r[s>>>8&255]<<8|r[255&s],s^=f[a/n|0]<<24),i[a]=i[a-n]^s}for(var u=this._invKeySchedule=[],c=0;c<o;c++)a=o-c,s=c%4?i[a]:i[a-4],u[c]=c<4||a<=4?s:l[r[s>>>24]]^d[r[s>>>16&255]]^p[r[s>>>8&255]]^h[r[255&s]]}},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,a,s,u,c,r)},decryptBlock:function(e,t){var n=e[t+1];e[t+1]=e[t+3],e[t+3]=n,this._doCryptBlock(e,t,this._invKeySchedule,l,d,p,h,o),n=e[t+1],e[t+1]=e[t+3],e[t+3]=n},_doCryptBlock:function(e,t,n,r,o,i,a,s){for(var u=this._nRounds,c=e[t]^n[0],l=e[t+1]^n[1],d=e[t+2]^n[2],p=e[t+3]^n[3],h=4,f=1;f<u;f++){var g=r[c>>>24]^o[l>>>16&255]^i[d>>>8&255]^a[255&p]^n[h++],y=r[l>>>24]^o[d>>>16&255]^i[p>>>8&255]^a[255&c]^n[h++],v=r[d>>>24]^o[p>>>16&255]^i[c>>>8&255]^a[255&l]^n[h++],m=r[p>>>24]^o[c>>>16&255]^i[l>>>8&255]^a[255&d]^n[h++];c=g,l=y,d=v,p=m}g=(s[c>>>24]<<24|s[l>>>16&255]<<16|s[d>>>8&255]<<8|s[255&p])^n[h++],y=(s[l>>>24]<<24|s[d>>>16&255]<<16|s[p>>>8&255]<<8|s[255&c])^n[h++],v=(s[d>>>24]<<24|s[p>>>16&255]<<16|s[c>>>8&255]<<8|s[255&l])^n[h++],m=(s[p>>>24]<<24|s[c>>>16&255]<<16|s[l>>>8&255]<<8|s[255&d])^n[h++],e[t]=g,e[t+1]=y,e[t+2]=v,e[t+3]=m},keySize:8});e.AES=t._createHelper(g)}(),i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSEncrypt=void 0;var r=n(4),o=n(5),i=n(6),a=n(7),s=n(0),u=n(12);function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}r.ASN1.prototype.getHexStringValue=function(){var e=this.toHexString(),t=2*this.header,n=2*this.length;return e.substr(t,n)},a.RSAKey.prototype.parseKey=function(e){try{var t=0,n=0,a=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(e)?o.Hex.decode(e):i.Base64.unarmor(e),u=r.ASN1.decode(a);if(3===u.sub.length&&(u=u.sub[2].sub[0]),9===u.sub.length){t=u.sub[1].getHexStringValue(),this.n=(0,s.parseBigInt)(t,16),n=u.sub[2].getHexStringValue(),this.e=parseInt(n,16);var c=u.sub[3].getHexStringValue();this.d=(0,s.parseBigInt)(c,16);var l=u.sub[4].getHexStringValue();this.p=(0,s.parseBigInt)(l,16);var d=u.sub[5].getHexStringValue();this.q=(0,s.parseBigInt)(d,16);var p=u.sub[6].getHexStringValue();this.dmp1=(0,s.parseBigInt)(p,16);var h=u.sub[7].getHexStringValue();this.dmq1=(0,s.parseBigInt)(h,16);var f=u.sub[8].getHexStringValue();this.coeff=(0,s.parseBigInt)(f,16)}else{if(2!==u.sub.length)return!1;var g=u.sub[1].sub[0];t=g.sub[0].getHexStringValue(),this.n=(0,s.parseBigInt)(t,16),n=g.sub[1].getHexStringValue(),this.e=parseInt(n,16)}return!0}catch(e){return!1}},a.RSAKey.prototype.hasPrivateKeyProperty=function(e){return(e=e||{}).hasOwnProperty("n")&&e.hasOwnProperty("e")&&e.hasOwnProperty("d")&&e.hasOwnProperty("p")&&e.hasOwnProperty("q")&&e.hasOwnProperty("dmp1")&&e.hasOwnProperty("dmq1")&&e.hasOwnProperty("coeff")},a.RSAKey.prototype.hasPublicKeyProperty=function(e){return(e=e||{}).hasOwnProperty("n")&&e.hasOwnProperty("e")},a.RSAKey.prototype.parsePropertiesFrom=function(e){this.n=e.n,this.e=e.e,e.hasOwnProperty("d")&&(this.d=e.d,this.p=e.p,this.q=e.q,this.dmp1=e.dmp1,this.dmq1=e.dmq1,this.coeff=e.coeff)};var l=function(e){function t(e){c(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e&&("string"==typeof e?n.parseKey(e):(n.hasPrivateKeyProperty(e)||n.hasPublicKeyProperty(e))&&n.parsePropertiesFrom(e)),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.RSAKey),t}(),d=t.JSEncrypt=function e(t){c(this,e),t=t||{},this.default_key_size=parseInt(t.default_key_size)||1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null};d.prototype.setKey=function(e){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new l(e)},d.prototype.setPublicKey=function(e){this.setKey(e)},d.prototype.encrypt=function(e){try{return(0,u.hex2b64)(this.getKey().encrypt(e))}catch(e){return!1}},d.prototype.getKey=function(e){if(!this.key){if(this.key=new l,e&&"[object Function]"==={}.toString.call(e))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,e);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key}},function(e,t,n){"use strict";n.r(t),n.d(t,"Encryption",function(){return i});var r=n(1),o=n(2);class i{constructor(){this.cryptoJs=r,this.jsEncrypt=o}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a=function(e,t){var n=document.createElement(e);return n.className=t,n},s=function(e){return document.createTextNode(e)},u=function(){function e(t,n){i(this,e),t instanceof e?(this.enc=t.enc,this.pos=t.pos):(this.enc=t,this.pos=n)}return o(e,null,[{key:"hexDigits",get:function(){return"0123456789ABCDEF"}},{key:"reTime",get:function(){return/^((?:1[89]|2\d)?\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/}}]),o(e,[{key:"get",value:function(e){if(void 0===e&&(e=this.pos++),e>=this.enc.length)throw"Requesting byte offset "+e+" on a stream of length "+this.enc.length;return this.enc[e]}},{key:"hexByte",value:function(t){return e.hexDigits.charAt(t>>4&15)+e.hexDigits.charAt(15&t)}},{key:"hexDump",value:function(e,t,n){for(var r="",o=e;o<t;++o)if(r+=this.hexByte(this.get(o)),!0!==n)switch(15&o){case 7:r+="  ";break;case 15:r+="\n";break;default:r+=" "}return r}},{key:"parseStringISO",value:function(e,t){for(var n="",r=e;r<t;++r)n+=String.fromCharCode(this.get(r));return n}},{key:"parseStringUTF",value:function(e,t){for(var n="",r=e;r<t;){var o=this.get(r++);n+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(r++)):String.fromCharCode((15&o)<<12|(63&this.get(r++))<<6|63&this.get(r++))}return n}},{key:"parseStringBMP",value:function(e,t){for(var n="",r=e;r<t;r+=2){var o=this.get(r),i=this.get(r+1);n+=String.fromCharCode((o<<8)+i)}return n}},{key:"parseTime",value:function(t,n){var r=this.parseStringISO(t,n),o=e.reTime.exec(r);return o?(r=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(r+=":"+o[5],o[6]&&(r+=":"+o[6],o[7]&&(r+="."+o[7]))),o[8]&&(r+=" UTC","Z"!=o[8]&&(r+=o[8],o[9]&&(r+=":"+o[9]))),r):"Unrecognized time: "+r}},{key:"parseInteger",value:function(e,t){var n=t-e;if(n>4){n<<=3;var r=this.get(e);if(0===r)n-=8;else for(;r<128;)r<<=1,--n;return"("+n+" bit)"}for(var o=0,i=e;i<t;++i)o=o<<8|this.get(i);return o}},{key:"parseBitString",value:function(e,t){var n=this.get(e),r=(t-e-1<<3)-n,o="("+r+" bit)";if(r<=20){var i=n;o+=" ";for(var a=t-1;a>e;--a){for(var s=this.get(a),u=i;u<8;++u)o+=s>>u&1?"1":"0";i=0}}return o}},{key:"parseOctetString",value:function(e,t){var n=t-e,r="("+n+" byte) ";n>100&&(t=e+100);for(var o=e;o<t;++o)r+=this.hexByte(this.get(o));return n>100&&(r+="…"),r}},{key:"parseOID",value:function(e,t){for(var n="",r=0,o=0,i=e;i<t;++i){var a=this.get(i);if(r=r<<7|127&a,o+=7,!(128&a)){if(""===n){var s=r<80?r<40?0:1:2;n=s+"."+(r-40*s)}else n+="."+(o>=31?"bigint":r);r=o=0}}return n}}]),e}(),c=t.ASN1=function(){function e(t,n,r,o,a){i(this,e),this.stream=t,this.header=n,this.length=r,this.tag=o,this.sub=a}return o(e,null,[{key:"reSeemsASCII",get:function(){return/^[ -~]+$/}}]),o(e,[{key:"typeName",value:function(){if(void 0===this.tag)return"unknown";var e=this.tag>>6,t=(this.tag,31&this.tag);switch(e){case 0:switch(t){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString";default:return"Universal_"+t.toString(16)}case 1:return"Application_"+t.toString(16);case 2:return"["+t+"]";case 3:return"Private_"+t.toString(16)}}},{key:"content",value:function(){if(void 0===this.tag)return null;var t=this.tag>>6,n=31&this.tag,r=this.posContent(),o=Math.abs(this.length);if(0!==t){if(null!==this.sub)return"("+this.sub.length+" elem)";var i=this.stream.parseStringISO(r,r+Math.min(o,100));return e.reSeemsASCII.test(i)?i.substring(0,200)+(i.length>200?"…":""):this.stream.parseOctetString(r,r+o)}switch(n){case 1:return 0===this.stream.get(r)?"false":"true";case 2:return this.stream.parseInteger(r,r+o);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(r,r+o);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(r,r+o);case 6:return this.stream.parseOID(r,r+o);case 16:case 17:return"("+this.sub.length+" elem)";case 12:return this.stream.parseStringUTF(r,r+o);case 18:case 19:case 20:case 21:case 22:case 26:return this.stream.parseStringISO(r,r+o);case 30:return this.stream.parseStringBMP(r,r+o);case 23:case 24:return this.stream.parseTime(r,r+o)}return null}},{key:"toString",value:function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"}},{key:"print",value:function(e){if(void 0===e&&(e=""),document.writeln(e+this),null!==this.sub){e+="  ";for(var t=0,n=this.sub.length;t<n;++t)this.sub[t].print(e)}}},{key:"toPrettyString",value:function(e){void 0===e&&(e="");var t=e+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(t+="+"),t+=this.length,32&this.tag?t+=" (constructed)":3!=this.tag&&4!=this.tag||null===this.sub||(t+=" (encapsulates)"),t+="\n",null!==this.sub){e+="  ";for(var n=0,r=this.sub.length;n<r;++n)t+=this.sub[n].toPrettyString(e)}return t}},{key:"toDOM",value:function(){var e=a("div","node");e.asn1=this;var t=a("div","head"),n=this.typeName().replace(/_/g," ");t.innerHTML=n;var o=this.content();if(null!==o){o=String(o).replace(/</g,"&lt;");var i=a("span","preview");i.appendChild(s(o)),t.appendChild(i)}e.appendChild(t),this.node=e,this.head=t;var u=a("div","value");if(n="Offset: "+this.stream.pos+"<br/>",n+="Length: "+this.header+"+",this.length>=0?n+=this.length:n+=-this.length+" (undefined)",32&this.tag?n+="<br/>(constructed)":3!=this.tag&&4!=this.tag||null===this.sub||(n+="<br/>(encapsulates)"),null!==o&&(n+="<br/>Value:<br/><b>"+o+"</b>","object"===("undefined"==typeof oids?"undefined":r(oids))&&6==this.tag)){var c=oids[o];c&&(c.d&&(n+="<br/>"+c.d),c.c&&(n+="<br/>"+c.c),c.w&&(n+="<br/>(warning!)"))}u.innerHTML=n,e.appendChild(u);var l=a("div","sub");if(null!==this.sub)for(var d=0,p=this.sub.length;d<p;++d)l.appendChild(this.sub[d].toDOM());return e.appendChild(l),t.onclick=function(){e.className="node collapsed"==e.className?"node":"node collapsed"},e}},{key:"posStart",value:function(){return this.stream.pos}},{key:"posContent",value:function(){return this.stream.pos+this.header}},{key:"posEnd",value:function(){return this.stream.pos+this.header+Math.abs(this.length)}},{key:"fakeHover",value:function(e){this.node.className+=" hover",e&&(this.head.className+=" hover")}},{key:"fakeOut",value:function(e){var t=/ ?hover/;this.node.className=this.node.className.replace(t,""),e&&(this.head.className=this.head.className.replace(t,""))}},{key:"toHexDOM_sub",value:function(e,t,n,r,o){if(!(r>=o)){var i=a("span",t);i.appendChild(s(n.hexDump(r,o))),e.appendChild(i)}}},{key:"toHexDOM",value:function(e){var t=a("span","hex");if(void 0===e&&(e=t),this.head.hexNode=t,this.head.onmouseover=function(){this.hexNode.className="hexCurrent"},this.head.onmouseout=function(){this.hexNode.className="hex"},t.asn1=this,t.onmouseover=function(){var t=!e.selected;t&&(e.selected=this.asn1,this.className="hexCurrent"),this.asn1.fakeHover(t)},t.onmouseout=function(){var t=e.selected==this.asn1;this.asn1.fakeOut(t),t&&(e.selected=null,this.className="hex")},this.toHexDOM_sub(t,"tag",this.stream,this.posStart(),this.posStart()+1),this.toHexDOM_sub(t,this.length>=0?"dlen":"ulen",this.stream,this.posStart()+1,this.posContent()),null===this.sub)t.appendChild(s(this.stream.hexDump(this.posContent(),this.posEnd())));else if(this.sub.length>0){var n=this.sub[0],r=this.sub[this.sub.length-1];this.toHexDOM_sub(t,"intro",this.stream,this.posContent(),n.posStart());for(var o=0,i=this.sub.length;o<i;++o)t.appendChild(this.sub[o].toHexDOM(e));this.toHexDOM_sub(t,"outro",this.stream,r.posEnd(),this.posEnd())}return t}},{key:"toHexString",value:function(e){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)}}]),e}();c.decodeLength=function(e){var t=e.get(),n=127&t;if(n==t)return n;if(n>3)throw"Length over 24 bits not supported at position "+(e.pos-1);if(0===n)return-1;t=0;for(var r=0;r<n;++r)t=t<<8|e.get();return t},c.hasContent=function(e,t,n){if(32&e)return!0;if(e<3||e>4)return!1;var r=new u(n);if(3==e&&r.get(),r.get()>>6&1)return!1;try{var o=c.decodeLength(r);return r.pos-n.pos+o==t}catch(e){return!1}},c.decode=function(e){e instanceof u||(e=new u(e,0));var t=new u(e),n=e.get(),r=c.decodeLength(e),o=e.pos-t.pos,i=null;if(c.hasContent(n,r,e)){var a=e.pos;if(3==n&&e.get(),i=[],r>=0){for(var s=a+r;e.pos<s;)i[i.length]=c.decode(e);if(e.pos!=s)throw"Content size is not correct for container starting at offset "+a}else try{for(;;){var l=c.decode(e);if(0===l.tag)break;i[i.length]=l}r=a-e.pos}catch(e){throw"Exception while decoding undefined length content: "+e}}else e.pos+=r;return new c(t,o,r,n,i)},c.test=function(){for(var e=[{value:[39],expected:39},{value:[129,201],expected:201},{value:[131,254,220,186],expected:16702650}],t=0,n=e.length;t<n;++t){var r=new u(e[t].value,0),o=c.decodeLength(r);o!=e[t].expected&&document.write("In test["+t+"] expected "+e[t].expected+" got "+o+"\n")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.Hex={},o=void 0;r.decode=function(e){var t;if(void 0===o){var n="0123456789ABCDEF",r=" \f\n\r\t \u2028\u2029";for(o=[],t=0;t<16;++t)o[n.charAt(t)]=t;for(n=n.toLowerCase(),t=10;t<16;++t)o[n.charAt(t)]=t;for(t=0;t<r.length;++t)o[r.charAt(t)]=-1}var i=[],a=0,s=0;for(t=0;t<e.length;++t){var u=e.charAt(t);if("="==u)break;if(-1!=(u=o[u])){if(void 0===u)throw"Illegal character at offset "+t;a|=u,++s>=2?(i[i.length]=a,a=0,s=0):a<<=4}}if(s)throw"Hex encoding incomplete: 4 bits missing";return i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.Base64={},o=void 0;r.decode=function(e){var t;if(void 0===o){var n="= \f\n\r\t \u2028\u2029";for(o=[],t=0;t<64;++t)o["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(t)]=t;for(t=0;t<n.length;++t)o[n.charAt(t)]=-1}var r=[],i=0,a=0;for(t=0;t<e.length;++t){var s=e.charAt(t);if("="==s)break;if(-1!=(s=o[s])){if(void 0===s)throw"Illegal character at offset "+t;i|=s,++a>=4?(r[r.length]=i>>16,r[r.length]=i>>8&255,r[r.length]=255&i,i=0,a=0):i<<=6}}switch(a){case 1:throw"Base64 encoding incomplete: at least 2 bits missing";case 2:r[r.length]=i>>10;break;case 3:r[r.length]=i>>16,r[r.length]=i>>8&255}return r},r.re=/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,r.unarmor=function(e){var t=r.re.exec(e);if(t)if(t[1])e=t[1];else{if(!t[2])throw"RegExp out of sync";e=t[2]}return r.decode(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RSAKey=void 0;var r=n(0);Object.defineProperty(t,"RSAKey",{enumerable:!0,get:function(){return r.RSAKey}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BigInteger=void 0;var r=n(9);Object.defineProperty(t,"BigInteger",{enumerable:!0,get:function(){return r.BigInteger}})},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.nbi=i,t.int2char=l,t.intAt=d,t.nbv=p,t.nbits=h;var o=t.BigInteger=function e(t,n,o){r(this,e),null!=t&&("number"==typeof t?this.fromNumber(t,n,o):null==n&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,n))};function i(){return new o(null)}o.prototype.am=function(e,t,n,r,o,i){for(var a=16383&t,s=t>>14;--i>=0;){var u=16383&this[e],c=this[e++]>>14,l=s*u+c*a;o=((u=a*u+((16383&l)<<14)+n[r]+o)>>28)+(l>>14)+s*c,n[r++]=268435455&u}return o},o.prototype.DB=28,o.prototype.DM=268435455,o.prototype.DV=1<<28,o.prototype.FV=Math.pow(2,52),o.prototype.F1=24,o.prototype.F2=4;var a,s,u="0123456789abcdefghijklmnopqrstuvwxyz",c=[];for(a="0".charCodeAt(0),s=0;s<=9;++s)c[a++]=s;for(a="a".charCodeAt(0),s=10;s<36;++s)c[a++]=s;for(a="A".charCodeAt(0),s=10;s<36;++s)c[a++]=s;function l(e){return u.charAt(e)}function d(e,t){var n=c[e.charCodeAt(t)];return null==n?-1:n}function p(e){var t=i();return t.fromInt(e),t}function h(e){var t,n=1;return 0!=(t=e>>>16)&&(e=t,n+=16),0!=(t=e>>8)&&(e=t,n+=8),0!=(t=e>>4)&&(e=t,n+=4),0!=(t=e>>2)&&(e=t,n+=2),0!=(t=e>>1)&&(e=t,n+=1),n}var f=t.Classic=function e(t){r(this,e),this.m=t};f.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},f.prototype.revert=function(e){return e},f.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},f.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n),this.reduce(n)},f.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)};var g=t.Montgomery=function e(t){r(this,e),this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t};g.prototype.convert=function(e){var t=i();return e.abs().dlShiftTo(this.m.t,t),t.divRemTo(this.m,null,t),e.s<0&&t.compareTo(o.ZERO)>0&&this.m.subTo(t,t),t},g.prototype.revert=function(e){var t=i();return e.copyTo(t),this.reduce(t),t},g.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var n=32767&e[t],r=n*this.mpl+((n*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[n=t+this.m.t]+=this.m.am(0,r,e,t,0,this.m.t);e[n]>=e.DV;)e[n]-=e.DV,e[++n]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},g.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n),this.reduce(n)},g.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},o.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e[t]=this[t];e.t=this.t,e.s=this.s},o.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},o.prototype.fromString=function(e,t){var n;if(16==t)n=4;else if(8==t)n=3;else if(256==t)n=8;else if(2==t)n=1;else if(32==t)n=5;else{if(4!=t)return void this.fromRadix(e,t);n=2}this.t=0,this.s=0;for(var r=e.length,i=!1,a=0;--r>=0;){var s=8==n?255&e[r]:d(e,r);s<0?"-"==e.charAt(r)&&(i=!0):(i=!1,0==a?this[this.t++]=s:a+n>this.DB?(this[this.t-1]|=(s&(1<<this.DB-a)-1)<<a,this[this.t++]=s>>this.DB-a):this[this.t-1]|=s<<a,(a+=n)>=this.DB&&(a-=this.DB))}8==n&&0!=(128&e[0])&&(this.s=-1,a>0&&(this[this.t-1]|=(1<<this.DB-a)-1<<a)),this.clamp(),i&&o.ZERO.subTo(this,this)},o.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},o.prototype.dlShiftTo=function(e,t){var n;for(n=this.t-1;n>=0;--n)t[n+e]=this[n];for(n=e-1;n>=0;--n)t[n]=0;t.t=this.t+e,t.s=this.s},o.prototype.drShiftTo=function(e,t){for(var n=e;n<this.t;++n)t[n-e]=this[n];t.t=Math.max(this.t-e,0),t.s=this.s},o.prototype.lShiftTo=function(e,t){var n,r=e%this.DB,o=this.DB-r,i=(1<<o)-1,a=Math.floor(e/this.DB),s=this.s<<r&this.DM;for(n=this.t-1;n>=0;--n)t[n+a+1]=this[n]>>o|s,s=(this[n]&i)<<r;for(n=a-1;n>=0;--n)t[n]=0;t[a]=s,t.t=this.t+a+1,t.s=this.s,t.clamp()},o.prototype.rShiftTo=function(e,t){t.s=this.s;var n=Math.floor(e/this.DB);if(n>=this.t)t.t=0;else{var r=e%this.DB,o=this.DB-r,i=(1<<r)-1;t[0]=this[n]>>r;for(var a=n+1;a<this.t;++a)t[a-n-1]|=(this[a]&i)<<o,t[a-n]=this[a]>>r;r>0&&(t[this.t-n-1]|=(this.s&i)<<o),t.t=this.t-n,t.clamp()}},o.prototype.subTo=function(e,t){for(var n=0,r=0,o=Math.min(e.t,this.t);n<o;)r+=this[n]-e[n],t[n++]=r&this.DM,r>>=this.DB;if(e.t<this.t){for(r-=e.s;n<this.t;)r+=this[n],t[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<e.t;)r-=e[n],t[n++]=r&this.DM,r>>=this.DB;r-=e.s}t.s=r<0?-1:0,r<-1?t[n++]=this.DV+r:r>0&&(t[n++]=r),t.t=n,t.clamp()},o.prototype.multiplyTo=function(e,t){var n=this.abs(),r=e.abs(),i=n.t;for(t.t=i+r.t;--i>=0;)t[i]=0;for(i=0;i<r.t;++i)t[i+n.t]=n.am(0,r[i],t,i,0,n.t);t.s=0,t.clamp(),this.s!=e.s&&o.ZERO.subTo(t,t)},o.prototype.squareTo=function(e){for(var t=this.abs(),n=e.t=2*t.t;--n>=0;)e[n]=0;for(n=0;n<t.t-1;++n){var r=t.am(n,t[n],e,2*n,0,1);(e[n+t.t]+=t.am(n+1,2*t[n],e,2*n+1,r,t.t-n-1))>=t.DV&&(e[n+t.t]-=t.DV,e[n+t.t+1]=1)}e.t>0&&(e[e.t-1]+=t.am(n,t[n],e,2*n,0,1)),e.s=0,e.clamp()},o.prototype.divRemTo=function(e,t,n){var r=e.abs();if(!(r.t<=0)){var a=this.abs();if(a.t<r.t)return null!=t&&t.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=i());var s=i(),u=this.s,c=e.s,l=this.DB-h(r[r.t-1]);l>0?(r.lShiftTo(l,s),a.lShiftTo(l,n)):(r.copyTo(s),a.copyTo(n));var d=s.t,p=s[d-1];if(0!=p){var f=p*(1<<this.F1)+(d>1?s[d-2]>>this.F2:0),g=this.FV/f,y=(1<<this.F1)/f,v=1<<this.F2,m=n.t,w=m-d,E=null==t?i():t;for(s.dlShiftTo(w,E),n.compareTo(E)>=0&&(n[n.t++]=1,n.subTo(E,n)),o.ONE.dlShiftTo(d,E),E.subTo(s,s);s.t<d;)s[s.t++]=0;for(;--w>=0;){var I=n[--m]==p?this.DM:Math.floor(n[m]*g+(n[m-1]+v)*y);if((n[m]+=s.am(0,I,n,w,0,d))<I)for(s.dlShiftTo(w,E),n.subTo(E,n);n[m]<--I;)n.subTo(E,n)}null!=t&&(n.drShiftTo(d,t),u!=c&&o.ZERO.subTo(t,t)),n.t=d,n.clamp(),l>0&&n.rShiftTo(l,n),u<0&&o.ZERO.subTo(n,n)}}},o.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},o.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},o.prototype.exp=function(e,t){if(e>4294967295||e<1)return o.ONE;var n=i(),r=i(),a=t.convert(this),s=h(e)-1;for(a.copyTo(n);--s>=0;)if(t.sqrTo(n,r),(e&1<<s)>0)t.mulTo(r,a,n);else{var u=n;n=r,r=u}return t.revert(n)},o.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var n,r=(1<<t)-1,o=!1,i="",a=this.t,s=this.DB-a*this.DB%t;if(a-- >0)for(s<this.DB&&(n=this[a]>>s)>0&&(o=!0,i=l(n));a>=0;)s<t?(n=(this[a]&(1<<s)-1)<<t-s,n|=this[--a]>>(s+=this.DB-t)):(n=this[a]>>(s-=t)&r,s<=0&&(s+=this.DB,--a)),n>0&&(o=!0),o&&(i+=l(n));return o?i:"0"},o.prototype.negate=function(){var e=i();return o.ZERO.subTo(this,e),e},o.prototype.abs=function(){return this.s<0?this.negate():this},o.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var n=this.t;if(0!=(t=n-e.t))return this.s<0?-t:t;for(;--n>=0;)if(0!=(t=this[n]-e[n]))return t;return 0},o.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+h(this[this.t-1]^this.s&this.DM)},o.prototype.mod=function(e){var t=i();return this.abs().divRemTo(e,null,t),this.s<0&&t.compareTo(o.ZERO)>0&&e.subTo(t,t),t},o.prototype.modPowInt=function(e,t){var n;return n=e<256||t.isEven()?new f(t):new g(t),this.exp(e,n)},o.ZERO=p(0),o.ONE=p(1)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SecureRandom=void 0;var r,o,i,a=n(11);function s(){if(null==r){for(r=(0,a.prng_newstate)();i<a.rng_psize;){var e=Math.floor(65536*Math.random());o[i++]=255&e}for(r.init(o),i=0;i<o.length;++i)o[i]=0;i=0}return r.next()}null==o&&(o=new Array,i=0),(t.SecureRandom=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}).prototype.nextBytes=function(e){var t;for(t=0;t<e.length;++t)e[t]=s()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prng_newstate=function(){return new r};var r=t.Arcfour=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.i=0,this.j=0,this.S=[]};r.prototype.init=function(e){var t,n,r;for(t=0;t<256;++t)this.S[t]=t;for(n=0,t=0;t<256;++t)n=n+this.S[t]+e[t%e.length]&255,r=this.S[t],this.S[t]=this.S[n],this.S[n]=r;this.i=0,this.j=0},r.prototype.next=function(){var e;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,e=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=e,this.S[e+this.S[this.i]&255]},t.rng_psize=256},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hex2b64=function(e){var t,n,i="";for(t=0;t+3<=e.length;t+=3)n=parseInt(e.substring(t,t+3),16),i+=r.charAt(n>>6)+r.charAt(63&n);for(t+1==e.length?(n=parseInt(e.substring(t,t+1),16),i+=r.charAt(n<<2)):t+2==e.length&&(n=parseInt(e.substring(t,t+2),16),i+=r.charAt(n>>2)+r.charAt((3&n)<<4));(3&i.length)>0;)i+=o;return i};var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o="="}]))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.encryption=e}return e.prototype.getRsaEncrypt=function(e,t){var n=new this.encryption.JSEncrypt;return n.setPublicKey(t),this.encrypted=n.encrypt(e),this.encrypted},e.prototype.getRSADecrypt=function(e,t){var n=new this.encryption.JSEncrypt;return n.setPrivateKey(t),this.unencrypted=n.decrypt(e),this.unencrypted},e}();t.RSAEncryption=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(35),o=function(){function e(e){this.env=e.env,this.production=e.production,this.envProps=new r.EnvProps(e.envProps)}return e.prototype.getEnvType=function(){return this.env},e.prototype.getProduction=function(){return this.production},e.prototype.getEnvProps=function(){return this.envProps},e}();t.Environment=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.orgId=e.orgId,this.appId=e.appId,this.appVersion=e.appVersion,this.baseUrl=e.baseUrl,this.platform=e.platform,this.secureKey=e.secureKey,this.securityVersion=e.securityVersion,this.lat=e.lat,this.lon=e.lon}return e.prototype.getOrgId=function(){return this.orgId},e.prototype.getAppId=function(){return this.appId},e.prototype.getAppVersion=function(){return this.appVersion},e.prototype.getBaseUrl=function(){return this.baseUrl},e.prototype.getPlatform=function(){return this.platform},e.prototype.getSecureKey=function(){return this.secureKey},e.prototype.getSecurityVersion=function(){return this.securityVersion},e.prototype.getLongitude=function(){return this.lon},e.prototype.getLatitude=function(){return this.lat},e}();t.EnvProps=r},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(4),a=n(6),s=function(){function e(){}return e.prototype.doPostCall=function(e){var t=this,n=this.getResponseHeaders(e.header,e.body);return i.Logger.getInstance().log("Calling Server==>",n,e.header),fetch(e.url,{method:"POST",body:this.getNetworkBody(e.body),headers:n}).then(function(e){return r(t,void 0,void 0,function(){var t;return o(this,function(n){switch(n.label){case 0:return i.Logger.getInstance().log("Response recieved ==>",e),t={},[4,e.json()];case 1:return[2,(t.body=n.sent(),t.headers=e.headers,t.responseCode=e.status,t.status=e.ok,t)]}})})}).catch(function(e){throw a.UserResponse.mapAPIResponse(!1,{status:"",message:"Connection Error! We are unable to reach to the server"},"PW003")})},e.prototype.getNetworkBody=function(e){return e instanceof FormData?e:JSON.stringify(e)},e.prototype.getResponseHeaders=function(e,t){return t instanceof FormData?e:Object.assign({"Content-Type":"application/json"},e)},e}();t.FetchWrapper=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.doPostCall=function(e){return new Promise(function(){})},e}();t.AxiosWrapper=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.doPostCall=function(e){return new Promise(function(){})},e}();t.XmlHttpWrapper=r},function(e,t,n){e.exports=function(){return new Worker(n.p+"assets/worker.js")}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(10),a=n(0),s=n(11),u=n(1),c=n(12),l=n(9),d=function(){function e(){this.security=new a.Security,this.platwareHeaderandBody=new i.PlatwareRequestModel,this.requestUtility=new u.RequestUtility,this.dateParsing=new s.DateParsing,this.validator=new l.Validators}return e.prototype.getRegistrartionRequest=function(e){return r(this,void 0,void 0,function(){var t,n;return o(this,function(r){switch(r.label){case 0:return t=this.reqReqData(e),[4,this.requestUtility.fingerprint()];case 1:return n=r.sent(),this.requestProperty=new c.RequestProprty(t,n),this.setBodyInterfaceKeys(t),this.setHeaderInterfaceKeys(t),this.setRegisterHeaders(this.requestProperty.getCurrentDate,this.requestProperty.getCurrentNounce,this.requestProperty.getFingerPrint,this.requestProperty.getServiceName,this.requestProperty.getNounce,this.requestProperty.getEnvProp),this.setRegisterBody(this.requestProperty.getWindowNavigator,this.requestProperty.getCurrentDate,this.requestProperty.getFingerPrint,t,this.requestProperty.getEnvProp),[2,this.getPWRequest()]}})})},e.prototype.reqReqData=function(e){return{url:"/register",envProps:e.envProps,reqData:{interfaces:{},services:{REGISTERAPP:[{}]}}}},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var n in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[n]=t[n]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var n in t)this.platwareHeaderandBody.pwRequest.PWHeader[n]=t[n]},e.prototype.setRegisterHeaders=function(e,t,n,r,o,i){var a=(t.toString()+i.secureKey).substring(0,32),s=i.orgId+"~"+i.appId+"~"+n+":app:"+t,u=this.security.aesEncryption.getEncryption(s,a);this.platwareHeaderandBody.pwRequest.PWHeader.txnkey="",this.platwareHeaderandBody.pwRequest.PWHeader.authorization="Basic "+u;var c=this.security.aesEncryption.getHashValue("Basic "+u,i.secureKey);this.platwareHeaderandBody.pwRequest.PWHeader.hash=c,this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid("--",n,e,i),this.platwareHeaderandBody.pwRequest.PWHeader.nounce=o,this.setHeaderKeys(r,n,i,"PR_PR")},e.prototype.setRegisterBody=function(e,t,n,r,o){this.setInterface(t,e,n,o),this.platwareHeaderandBody.pwRequest.PWBody.services=r.reqData.services},e.prototype.setHeaderKeys=function(e,t,n,i){return r(this,void 0,void 0,function(){return o(this,function(r){return this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(n),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=e,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=t,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=i,[2]})})},e.prototype.setInterface=function(e,t,n,r){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=n,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=r.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=r.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=r.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return r(this,void 0,void 0,function(){var e;return o(this,function(t){switch(t.label){case 0:return[4,this.validator.networkValidators.getDeviceId()];case 1:return e=t.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=e,[2,this.platwareHeaderandBody.pwRequest]}})})},e}();t.RegistrationService=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.getHexString=function(e){for(var t=[],n=0;n<e.length;n++)t.push(e.charCodeAt(n));return this.toHexString(t)},e.prototype.toHexString=function(e){return Array.from(e,this.byte).join("")},e.prototype.byte=function(e){return("0"+(255&e).toString(16)).slice(-2)},e}();t.HexUtility=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(8),o=n(5),i=n(14),a=function(){function e(){}return e.prototype.isValidArguments=function(e,t){return void 0===t&&(t=!1),t?this.isNumberofArguments(e)&&this.isBodyValid(e)&&this.isHeaderValid(e):this.isNumberofArguments(e)&&this.isBodyValid(e)&&this.isCallbackValid(e)&&this.isHeaderValid(e)},e.prototype.isNumberofArguments=function(e){try{var t=e.length;if(t>1&&t<6)return!0;throw new i.CustomError("PW001",{status:!1,message:"Execute Api requires atleast two and atmost five arguments"})}catch(e){throw e}},e.prototype.isCallbackValid=function(e){var t="function"==typeof e[3],n=1===e[3].length;if(!0===t&&!0===n)return!0;throw r.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM)},e.prototype.isBodyValid=function(e){try{if(Object.keys(e[1]).length<1)throw r.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM);for(var t in e[1]){if(!Array.isArray(e[1][t]))throw r.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM);for(var n in e[1][t]){if("object"==typeof e[1][t][n])return!0;throw r.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM)}}}catch(e){throw e}},e.prototype.isHeaderValid=function(e){if(!(void 0!==e[2]&&Object.keys(e[2]).length>0))return!0;for(var t in e[2])try{if("string"==typeof e[2][t])return!0;throw r.ErrorHandler.getErrors(o.ErrorConstant.HEADERPARAM)}catch(e){throw e}},e}();t.ArgumentsValidation=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.NETWORKOFFLINE="Internet Connection appears to be offline, Please check your Internet connection.",e.BODYNOTVALID="Request parameters(Body) are not valid",e.HEADERNOTVALID="Request parameters(Headers) are not valid",e.GUUIDERROR="Your session has been killed",e.REQUESTNOTVALID="Request parameters are not valid",e.MAXSERVICE="We can process maximum of five services at once",e.DECRYPTION="Unable to decript data! Hint. Some data has been modified.",e.PARSINGRESPONSE="Unable to parse response data",e.SERVERCONNECTION="Connection Error! We are unable to reach to the server",e.REGISTRATION="Handshake fail! Please connect to the server team.",e.DUPLICATESESSION="It seems like you are already logged in some other device. Kill you existing session and login again.",e.DEFAULTMESSAGE="Some technical error occured! Please check you log and come back to us.",e.CALLBACKINVALID="Call Back is not a function",e}();t.ErrorMessage=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.parameterValidation=function(e){return"string"==typeof e.url&&"object"==typeof e.header&&"object"==typeof e.body},e}();t.HttpParameterValidation=r},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(8),a=n(5),s=n(46),u=function(){function e(){}return e.prototype.isNetworkAvailable=function(){if(navigator.onLine)return!0;throw i.ErrorHandler.getErrors(a.ErrorConstant.NETWORK)},e.prototype.getPosition=function(){var e=new Promise(function(e){setTimeout(function(){e({latitude:"",longitude:""})},0)});return Promise.race([e,new Promise(function(e,t){navigator.geolocation.getCurrentPosition(function(t){e(t.coords)},function(t){e({latitude:"",longitude:""})})})])},e.prototype.getDeviceId=function(){return r(this,void 0,void 0,function(){var e=this;return o(this,function(t){return[2,new Promise(function(t,n){return r(e,void 0,void 0,function(){var e=this;return o(this,function(n){return setTimeout(function(){return r(e,void 0,void 0,function(){var e,n,r;return o(this,function(o){switch(o.label){case 0:return[4,s.getPromise()];case 1:return e=o.sent(),n=e.map(function(e){return e.value}),r=s.x64hash128(n.join(""),31),t(r),[2]}})})},500),[2]})})})]})})},e}();t.NetworkValidation=u},function(e,t,n){var r,o;!function(i,a,s){"use strict";"undefined"!=typeof window&&n(47)?void 0===(o="function"==typeof(r=s)?r.call(t,n,t,e):r)||(e.exports=o):e.exports?e.exports=s():a.exports?a.exports=s():a.Fingerprint2=s()}(0,this,function(){"use strict";void 0===Array.isArray&&(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)});var e=function(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]+t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]+t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]+t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]+t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]},t=function(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]*t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]*t[3],n[1]+=n[2]>>>16,n[2]&=65535,n[2]+=e[3]*t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]*t[3],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[2]*t[2],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[3]*t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]*t[3]+e[1]*t[2]+e[2]*t[1]+e[3]*t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]},n=function(e,t){return 32===(t%=64)?[e[1],e[0]]:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t|e[0]>>>32-t]:(t-=32,[e[1]<<t|e[0]>>>32-t,e[0]<<t|e[1]>>>32-t])},r=function(e,t){return 0===(t%=64)?e:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t]:[e[1]<<t-32,0]},o=function(e,t){return[e[0]^t[0],e[1]^t[1]]},i=function(e){return e=o(e,[0,e[0]>>>1]),e=t(e,[4283543511,3981806797]),e=o(e,[0,e[0]>>>1]),e=t(e,[3301882366,444984403]),e=o(e,[0,e[0]>>>1])},a=function(a,s){s=s||0;for(var u=(a=a||"").length%16,c=a.length-u,l=[0,s],d=[0,s],p=[0,0],h=[0,0],f=[2277735313,289559509],g=[1291169091,658871167],y=0;y<c;y+=16)p=[255&a.charCodeAt(y+4)|(255&a.charCodeAt(y+5))<<8|(255&a.charCodeAt(y+6))<<16|(255&a.charCodeAt(y+7))<<24,255&a.charCodeAt(y)|(255&a.charCodeAt(y+1))<<8|(255&a.charCodeAt(y+2))<<16|(255&a.charCodeAt(y+3))<<24],h=[255&a.charCodeAt(y+12)|(255&a.charCodeAt(y+13))<<8|(255&a.charCodeAt(y+14))<<16|(255&a.charCodeAt(y+15))<<24,255&a.charCodeAt(y+8)|(255&a.charCodeAt(y+9))<<8|(255&a.charCodeAt(y+10))<<16|(255&a.charCodeAt(y+11))<<24],p=t(p,f),p=n(p,31),p=t(p,g),l=o(l,p),l=n(l,27),l=e(l,d),l=e(t(l,[0,5]),[0,1390208809]),h=t(h,g),h=n(h,33),h=t(h,f),d=o(d,h),d=n(d,31),d=e(d,l),d=e(t(d,[0,5]),[0,944331445]);switch(p=[0,0],h=[0,0],u){case 15:h=o(h,r([0,a.charCodeAt(y+14)],48));case 14:h=o(h,r([0,a.charCodeAt(y+13)],40));case 13:h=o(h,r([0,a.charCodeAt(y+12)],32));case 12:h=o(h,r([0,a.charCodeAt(y+11)],24));case 11:h=o(h,r([0,a.charCodeAt(y+10)],16));case 10:h=o(h,r([0,a.charCodeAt(y+9)],8));case 9:h=o(h,[0,a.charCodeAt(y+8)]),h=t(h,g),h=n(h,33),h=t(h,f),d=o(d,h);case 8:p=o(p,r([0,a.charCodeAt(y+7)],56));case 7:p=o(p,r([0,a.charCodeAt(y+6)],48));case 6:p=o(p,r([0,a.charCodeAt(y+5)],40));case 5:p=o(p,r([0,a.charCodeAt(y+4)],32));case 4:p=o(p,r([0,a.charCodeAt(y+3)],24));case 3:p=o(p,r([0,a.charCodeAt(y+2)],16));case 2:p=o(p,r([0,a.charCodeAt(y+1)],8));case 1:p=o(p,[0,a.charCodeAt(y)]),p=t(p,f),p=n(p,31),p=t(p,g),l=o(l,p)}return l=o(l,[0,a.length]),d=o(d,[0,a.length]),l=e(l,d),d=e(d,l),l=i(l),d=i(d),l=e(l,d),d=e(d,l),("00000000"+(l[0]>>>0).toString(16)).slice(-8)+("00000000"+(l[1]>>>0).toString(16)).slice(-8)+("00000000"+(d[0]>>>0).toString(16)).slice(-8)+("00000000"+(d[1]>>>0).toString(16)).slice(-8)},s={preprocessor:null,audio:{timeout:1e3,excludeIOS11:!0},fonts:{swfContainerId:"fingerprintjs2",swfPath:"flash/compiled/FontList.swf",userDefinedFonts:[],extendedJsFonts:!1},screen:{detectScreenOrientation:!0},plugins:{sortPluginsFor:[/palemoon/i],excludeIE:!1},extraComponents:[],excludes:{enumerateDevices:!0,pixelRatio:!0,doNotTrack:!0,fontsFlash:!0},NOT_AVAILABLE:"not available",ERROR:"error",EXCLUDED:"excluded"},u=function(e,t){if(Array.prototype.forEach&&e.forEach===Array.prototype.forEach)e.forEach(t);else if(e.length===+e.length)for(var n=0,r=e.length;n<r;n++)t(e[n],n,e);else for(var o in e)e.hasOwnProperty(o)&&t(e[o],o,e)},c=function(e,t){var n=[];return null==e?n:Array.prototype.map&&e.map===Array.prototype.map?e.map(t):(u(e,function(e,r,o){n.push(t(e,r,o))}),n)},l=function(){return navigator.mediaDevices&&navigator.mediaDevices.enumerateDevices},d=function(e){var t=[window.screen.width,window.screen.height];return e.screen.detectScreenOrientation&&t.sort().reverse(),t},p=function(e){if(window.screen.availWidth&&window.screen.availHeight){var t=[window.screen.availHeight,window.screen.availWidth];return e.screen.detectScreenOrientation&&t.sort().reverse(),t}return e.NOT_AVAILABLE},h=function(e){if(null==navigator.plugins)return e.NOT_AVAILABLE;for(var t=[],n=0,r=navigator.plugins.length;n<r;n++)navigator.plugins[n]&&t.push(navigator.plugins[n]);return g(e)&&(t=t.sort(function(e,t){return e.name>t.name?1:e.name<t.name?-1:0})),c(t,function(e){var t=c(e,function(e){return[e.type,e.suffixes]});return[e.name,e.description,t]})},f=function(e){var t=[];if(Object.getOwnPropertyDescriptor&&Object.getOwnPropertyDescriptor(window,"ActiveXObject")||"ActiveXObject"in window){t=c(["AcroPDF.PDF","Adodb.Stream","AgControl.AgControl","DevalVRXCtrl.DevalVRXCtrl.1","MacromediaFlashPaper.MacromediaFlashPaper","Msxml2.DOMDocument","Msxml2.XMLHTTP","PDF.PdfCtrl","QuickTime.QuickTime","QuickTimeCheckObject.QuickTimeCheck.1","RealPlayer","RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)","RealVideo.RealVideo(tm) ActiveX Control (32-bit)","Scripting.Dictionary","SWCtl.SWCtl","Shell.UIHelper","ShockwaveFlash.ShockwaveFlash","Skype.Detection","TDCCtl.TDCCtl","WMPlayer.OCX","rmocx.RealPlayer G2 Control","rmocx.RealPlayer G2 Control.1"],function(t){try{return new window.ActiveXObject(t),t}catch(t){return e.ERROR}})}else t.push(e.NOT_AVAILABLE);return navigator.plugins&&(t=t.concat(h(e))),t},g=function(e){for(var t=!1,n=0,r=e.plugins.sortPluginsFor.length;n<r;n++){var o=e.plugins.sortPluginsFor[n];if(navigator.userAgent.match(o)){t=!0;break}}return t},y=function(e){try{return!!window.sessionStorage}catch(t){return e.ERROR}},v=function(e){try{return!!window.localStorage}catch(t){return e.ERROR}},m=function(e){try{return!!window.indexedDB}catch(t){return e.ERROR}},w=function(e){return navigator.hardwareConcurrency?navigator.hardwareConcurrency:e.NOT_AVAILABLE},E=function(e){return navigator.cpuClass||e.NOT_AVAILABLE},I=function(e){return navigator.platform?navigator.platform:e.NOT_AVAILABLE},b=function(e){return navigator.doNotTrack?navigator.doNotTrack:navigator.msDoNotTrack?navigator.msDoNotTrack:window.doNotTrack?window.doNotTrack:e.NOT_AVAILABLE},S=function(){var e,t=0;void 0!==navigator.maxTouchPoints?t=navigator.maxTouchPoints:void 0!==navigator.msMaxTouchPoints&&(t=navigator.msMaxTouchPoints);try{document.createEvent("TouchEvent"),e=!0}catch(t){e=!1}return[t,e,"ontouchstart"in window]},P=function(e){var t=[],n=document.createElement("canvas");n.width=2e3,n.height=200,n.style.display="inline";var r=n.getContext("2d");return r.rect(0,0,10,10),r.rect(2,2,6,6),t.push("canvas winding:"+(!1===r.isPointInPath(5,5,"evenodd")?"yes":"no")),r.textBaseline="alphabetic",r.fillStyle="#f60",r.fillRect(125,1,62,20),r.fillStyle="#069",e.dontUseFakeFontInCanvas?r.font="11pt Arial":r.font="11pt no-real-font-123",r.fillText("Cwm fjordbank glyphs vext quiz, 😃",2,15),r.fillStyle="rgba(102, 204, 0, 0.2)",r.font="18pt Arial",r.fillText("Cwm fjordbank glyphs vext quiz, 😃",4,45),r.globalCompositeOperation="multiply",r.fillStyle="rgb(255,0,255)",r.beginPath(),r.arc(50,50,50,0,2*Math.PI,!0),r.closePath(),r.fill(),r.fillStyle="rgb(0,255,255)",r.beginPath(),r.arc(100,50,50,0,2*Math.PI,!0),r.closePath(),r.fill(),r.fillStyle="rgb(255,255,0)",r.beginPath(),r.arc(75,100,50,0,2*Math.PI,!0),r.closePath(),r.fill(),r.fillStyle="rgb(255,0,255)",r.arc(75,75,75,0,2*Math.PI,!0),r.arc(75,75,25,0,2*Math.PI,!0),r.fill("evenodd"),n.toDataURL&&t.push("canvas fp:"+n.toDataURL()),t},A=function(){var e,t=function(t){return e.clearColor(0,0,0,1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),"["+t[0]+", "+t[1]+"]"};if(!(e=q()))return null;var n=[],r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r);var o=new Float32Array([-.2,-.9,0,.4,-.26,0,0,.732134444,0]);e.bufferData(e.ARRAY_BUFFER,o,e.STATIC_DRAW),r.itemSize=3,r.numItems=3;var i=e.createProgram(),a=e.createShader(e.VERTEX_SHADER);e.shaderSource(a,"attribute vec2 attrVertex;varying vec2 varyinTexCoordinate;uniform vec2 uniformOffset;void main(){varyinTexCoordinate=attrVertex+uniformOffset;gl_Position=vec4(attrVertex,0,1);}"),e.compileShader(a);var s=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(s,"precision mediump float;varying vec2 varyinTexCoordinate;void main() {gl_FragColor=vec4(varyinTexCoordinate,0,1);}"),e.compileShader(s),e.attachShader(i,a),e.attachShader(i,s),e.linkProgram(i),e.useProgram(i),i.vertexPosAttrib=e.getAttribLocation(i,"attrVertex"),i.offsetUniform=e.getUniformLocation(i,"uniformOffset"),e.enableVertexAttribArray(i.vertexPosArray),e.vertexAttribPointer(i.vertexPosAttrib,r.itemSize,e.FLOAT,!1,0,0),e.uniform2f(i.offsetUniform,1,1),e.drawArrays(e.TRIANGLE_STRIP,0,r.numItems);try{n.push(e.canvas.toDataURL())}catch(e){}n.push("extensions:"+(e.getSupportedExtensions()||[]).join(";")),n.push("webgl aliased line width range:"+t(e.getParameter(e.ALIASED_LINE_WIDTH_RANGE))),n.push("webgl aliased point size range:"+t(e.getParameter(e.ALIASED_POINT_SIZE_RANGE))),n.push("webgl alpha bits:"+e.getParameter(e.ALPHA_BITS)),n.push("webgl antialiasing:"+(e.getContextAttributes().antialias?"yes":"no")),n.push("webgl blue bits:"+e.getParameter(e.BLUE_BITS)),n.push("webgl depth bits:"+e.getParameter(e.DEPTH_BITS)),n.push("webgl green bits:"+e.getParameter(e.GREEN_BITS)),n.push("webgl max anisotropy:"+function(e){var t=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic");if(t){var n=e.getParameter(t.MAX_TEXTURE_MAX_ANISOTROPY_EXT);return 0===n&&(n=2),n}return null}(e)),n.push("webgl max combined texture image units:"+e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS)),n.push("webgl max cube map texture size:"+e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE)),n.push("webgl max fragment uniform vectors:"+e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS)),n.push("webgl max render buffer size:"+e.getParameter(e.MAX_RENDERBUFFER_SIZE)),n.push("webgl max texture image units:"+e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)),n.push("webgl max texture size:"+e.getParameter(e.MAX_TEXTURE_SIZE)),n.push("webgl max varying vectors:"+e.getParameter(e.MAX_VARYING_VECTORS)),n.push("webgl max vertex attribs:"+e.getParameter(e.MAX_VERTEX_ATTRIBS)),n.push("webgl max vertex texture image units:"+e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS)),n.push("webgl max vertex uniform vectors:"+e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS)),n.push("webgl max viewport dims:"+t(e.getParameter(e.MAX_VIEWPORT_DIMS))),n.push("webgl red bits:"+e.getParameter(e.RED_BITS)),n.push("webgl renderer:"+e.getParameter(e.RENDERER)),n.push("webgl shading language version:"+e.getParameter(e.SHADING_LANGUAGE_VERSION)),n.push("webgl stencil bits:"+e.getParameter(e.STENCIL_BITS)),n.push("webgl vendor:"+e.getParameter(e.VENDOR)),n.push("webgl version:"+e.getParameter(e.VERSION));try{var c=e.getExtension("WEBGL_debug_renderer_info");c&&(n.push("webgl unmasked vendor:"+e.getParameter(c.UNMASKED_VENDOR_WEBGL)),n.push("webgl unmasked renderer:"+e.getParameter(c.UNMASKED_RENDERER_WEBGL)))}catch(e){}return e.getShaderPrecisionFormat?(u(["FLOAT","INT"],function(t){u(["VERTEX","FRAGMENT"],function(r){u(["HIGH","MEDIUM","LOW"],function(o){u(["precision","rangeMin","rangeMax"],function(i){var a=e.getShaderPrecisionFormat(e[r+"_SHADER"],e[o+"_"+t])[i];"precision"!==i&&(i="precision "+i);var s=["webgl ",r.toLowerCase()," shader ",o.toLowerCase()," ",t.toLowerCase()," ",i,":",a].join("");n.push(s)})})})}),H(e),n):(H(e),n)},R=function(){try{var e=q(),t=e.getExtension("WEBGL_debug_renderer_info"),n=e.getParameter(t.UNMASKED_VENDOR_WEBGL)+"~"+e.getParameter(t.UNMASKED_RENDERER_WEBGL);return H(e),n}catch(e){return null}},C=function(){var e=document.createElement("div");e.innerHTML="&nbsp;",e.className="adsbox";var t=!1;try{document.body.appendChild(e),t=0===document.getElementsByClassName("adsbox")[0].offsetHeight,document.body.removeChild(e)}catch(e){t=!1}return t},T=function(){if(void 0!==navigator.languages)try{if(navigator.languages[0].substr(0,2)!==navigator.language.substr(0,2))return!0}catch(e){return!0}return!1},_=function(){return window.screen.width<window.screen.availWidth||window.screen.height<window.screen.availHeight},O=function(){var e,t=navigator.userAgent.toLowerCase(),n=navigator.oscpu,r=navigator.platform.toLowerCase();if(e=t.indexOf("windows phone")>=0?"Windows Phone":t.indexOf("windows")>=0||t.indexOf("win16")>=0||t.indexOf("win32")>=0||t.indexOf("win64")>=0||t.indexOf("win95")>=0||t.indexOf("win98")>=0||t.indexOf("winnt")>=0||t.indexOf("wow64")>=0?"Windows":t.indexOf("android")>=0?"Android":t.indexOf("linux")>=0||t.indexOf("cros")>=0||t.indexOf("x11")>=0?"Linux":t.indexOf("iphone")>=0||t.indexOf("ipad")>=0||t.indexOf("ipod")>=0||t.indexOf("crios")>=0||t.indexOf("fxios")>=0?"iOS":t.indexOf("macintosh")>=0||t.indexOf("mac_powerpc)")>=0?"Mac":"Other",("ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0)&&"Windows"!==e&&"Windows Phone"!==e&&"Android"!==e&&"iOS"!==e&&"Other"!==e&&-1===t.indexOf("cros"))return!0;if(void 0!==n){if((n=n.toLowerCase()).indexOf("win")>=0&&"Windows"!==e&&"Windows Phone"!==e)return!0;if(n.indexOf("linux")>=0&&"Linux"!==e&&"Android"!==e)return!0;if(n.indexOf("mac")>=0&&"Mac"!==e&&"iOS"!==e)return!0;if((-1===n.indexOf("win")&&-1===n.indexOf("linux")&&-1===n.indexOf("mac"))!=("Other"===e))return!0}return r.indexOf("win")>=0&&"Windows"!==e&&"Windows Phone"!==e||((r.indexOf("linux")>=0||r.indexOf("android")>=0||r.indexOf("pike")>=0)&&"Linux"!==e&&"Android"!==e||((r.indexOf("mac")>=0||r.indexOf("ipad")>=0||r.indexOf("ipod")>=0||r.indexOf("iphone")>=0)&&"Mac"!==e&&"iOS"!==e||!(r.indexOf("arm")>=0&&"Windows Phone"===e)&&(!(r.indexOf("pike")>=0&&t.indexOf("opera mini")>=0)&&((r.indexOf("win")<0&&r.indexOf("linux")<0&&r.indexOf("mac")<0&&r.indexOf("iphone")<0&&r.indexOf("ipad")<0&&r.indexOf("ipod")<0)!==("Other"===e)||void 0===navigator.plugins&&"Windows"!==e&&"Windows Phone"!==e))))},B=function(){var e,t=navigator.userAgent.toLowerCase(),n=navigator.productSub;if(t.indexOf("edge/")>=0||t.indexOf("iemobile/")>=0)return!1;if(t.indexOf("opera mini")>=0)return!1;if(("Chrome"===(e=t.indexOf("firefox/")>=0?"Firefox":t.indexOf("opera/")>=0||t.indexOf(" opr/")>=0?"Opera":t.indexOf("chrome/")>=0?"Chrome":t.indexOf("safari/")>=0?t.indexOf("android 1.")>=0||t.indexOf("android 2.")>=0||t.indexOf("android 3.")>=0||t.indexOf("android 4.")>=0?"AOSP":"Safari":t.indexOf("trident/")>=0?"Internet Explorer":"Other")||"Safari"===e||"Opera"===e)&&"20030107"!==n)return!0;var r,o=eval.toString().length;if(37===o&&"Safari"!==e&&"Firefox"!==e&&"Other"!==e)return!0;if(39===o&&"Internet Explorer"!==e&&"Other"!==e)return!0;if(33===o&&"Chrome"!==e&&"AOSP"!==e&&"Opera"!==e&&"Other"!==e)return!0;try{throw"a"}catch(e){try{e.toSource(),r=!0}catch(e){r=!1}}return r&&"Firefox"!==e&&"Other"!==e},D=function(){var e=document.createElement("canvas");return!(!e.getContext||!e.getContext("2d"))},k=function(){if(!D())return!1;var e=q(),t=!!window.WebGLRenderingContext&&!!e;return H(e),t},x=function(){return"Microsoft Internet Explorer"===navigator.appName||!("Netscape"!==navigator.appName||!/Trident/.test(navigator.userAgent))},N=function(){return void 0!==window.swfobject},L=function(){return window.swfobject.hasFlashPlayerVersion("9.0.0")},M=function(e,t){window.___fp_swf_loaded=function(t){e(t)};var n=t.fonts.swfContainerId;!function(e){var t=document.createElement("div");t.setAttribute("id",e.fonts.swfContainerId),document.body.appendChild(t)}();var r={onReady:"___fp_swf_loaded"};window.swfobject.embedSWF(t.fonts.swfPath,n,"1","1","9.0.0",!1,r,{allowScriptAccess:"always",menu:"false"},{})},q=function(){var e=document.createElement("canvas"),t=null;try{t=e.getContext("webgl")||e.getContext("experimental-webgl")}catch(e){}return t||(t=null),t},H=function(e){var t=e.getExtension("WEBGL_lose_context");null!=t&&t.loseContext()},U=[{key:"userAgent",getData:function(e){e(navigator.userAgent)}},{key:"webdriver",getData:function(e,t){e(null==navigator.webdriver?t.NOT_AVAILABLE:navigator.webdriver)}},{key:"language",getData:function(e,t){e(navigator.language||navigator.userLanguage||navigator.browserLanguage||navigator.systemLanguage||t.NOT_AVAILABLE)}},{key:"colorDepth",getData:function(e,t){e(window.screen.colorDepth||t.NOT_AVAILABLE)}},{key:"deviceMemory",getData:function(e,t){e(navigator.deviceMemory||t.NOT_AVAILABLE)}},{key:"pixelRatio",getData:function(e,t){e(window.devicePixelRatio||t.NOT_AVAILABLE)}},{key:"hardwareConcurrency",getData:function(e,t){e(w(t))}},{key:"screenResolution",getData:function(e,t){e(d(t))}},{key:"availableScreenResolution",getData:function(e,t){e(p(t))}},{key:"timezoneOffset",getData:function(e){e((new Date).getTimezoneOffset())}},{key:"timezone",getData:function(e,t){window.Intl&&window.Intl.DateTimeFormat?e((new window.Intl.DateTimeFormat).resolvedOptions().timeZone):e(t.NOT_AVAILABLE)}},{key:"sessionStorage",getData:function(e,t){e(y(t))}},{key:"localStorage",getData:function(e,t){e(v(t))}},{key:"indexedDb",getData:function(e,t){e(m(t))}},{key:"addBehavior",getData:function(e){e(!(!document.body||!document.body.addBehavior))}},{key:"openDatabase",getData:function(e){e(!!window.openDatabase)}},{key:"cpuClass",getData:function(e,t){e(E(t))}},{key:"platform",getData:function(e,t){e(I(t))}},{key:"doNotTrack",getData:function(e,t){e(b(t))}},{key:"plugins",getData:function(e,t){x()?t.plugins.excludeIE?e(t.EXCLUDED):e(f(t)):e(h(t))}},{key:"canvas",getData:function(e,t){D()?e(P(t)):e(t.NOT_AVAILABLE)}},{key:"webgl",getData:function(e,t){k()?e(A()):e(t.NOT_AVAILABLE)}},{key:"webglVendorAndRenderer",getData:function(e){k()?e(R()):e()}},{key:"adBlock",getData:function(e){e(C())}},{key:"hasLiedLanguages",getData:function(e){e(T())}},{key:"hasLiedResolution",getData:function(e){e(_())}},{key:"hasLiedOs",getData:function(e){e(O())}},{key:"hasLiedBrowser",getData:function(e){e(B())}},{key:"touchSupport",getData:function(e){e(S())}},{key:"fonts",getData:function(e,t){var n=["monospace","sans-serif","serif"],r=["Andale Mono","Arial","Arial Black","Arial Hebrew","Arial MT","Arial Narrow","Arial Rounded MT Bold","Arial Unicode MS","Bitstream Vera Sans Mono","Book Antiqua","Bookman Old Style","Calibri","Cambria","Cambria Math","Century","Century Gothic","Century Schoolbook","Comic Sans","Comic Sans MS","Consolas","Courier","Courier New","Geneva","Georgia","Helvetica","Helvetica Neue","Impact","Lucida Bright","Lucida Calligraphy","Lucida Console","Lucida Fax","LUCIDA GRANDE","Lucida Handwriting","Lucida Sans","Lucida Sans Typewriter","Lucida Sans Unicode","Microsoft Sans Serif","Monaco","Monotype Corsiva","MS Gothic","MS Outlook","MS PGothic","MS Reference Sans Serif","MS Sans Serif","MS Serif","MYRIAD","MYRIAD PRO","Palatino","Palatino Linotype","Segoe Print","Segoe Script","Segoe UI","Segoe UI Light","Segoe UI Semibold","Segoe UI Symbol","Tahoma","Times","Times New Roman","Times New Roman PS","Trebuchet MS","Verdana","Wingdings","Wingdings 2","Wingdings 3"];if(t.fonts.extendedJsFonts){r=r.concat(["Abadi MT Condensed Light","Academy Engraved LET","ADOBE CASLON PRO","Adobe Garamond","ADOBE GARAMOND PRO","Agency FB","Aharoni","Albertus Extra Bold","Albertus Medium","Algerian","Amazone BT","American Typewriter","American Typewriter Condensed","AmerType Md BT","Andalus","Angsana New","AngsanaUPC","Antique Olive","Aparajita","Apple Chancery","Apple Color Emoji","Apple SD Gothic Neo","Arabic Typesetting","ARCHER","ARNO PRO","Arrus BT","Aurora Cn BT","AvantGarde Bk BT","AvantGarde Md BT","AVENIR","Ayuthaya","Bandy","Bangla Sangam MN","Bank Gothic","BankGothic Md BT","Baskerville","Baskerville Old Face","Batang","BatangChe","Bauer Bodoni","Bauhaus 93","Bazooka","Bell MT","Bembo","Benguiat Bk BT","Berlin Sans FB","Berlin Sans FB Demi","Bernard MT Condensed","BernhardFashion BT","BernhardMod BT","Big Caslon","BinnerD","Blackadder ITC","BlairMdITC TT","Bodoni 72","Bodoni 72 Oldstyle","Bodoni 72 Smallcaps","Bodoni MT","Bodoni MT Black","Bodoni MT Condensed","Bodoni MT Poster Compressed","Bookshelf Symbol 7","Boulder","Bradley Hand","Bradley Hand ITC","Bremen Bd BT","Britannic Bold","Broadway","Browallia New","BrowalliaUPC","Brush Script MT","Californian FB","Calisto MT","Calligrapher","Candara","CaslonOpnface BT","Castellar","Centaur","Cezanne","CG Omega","CG Times","Chalkboard","Chalkboard SE","Chalkduster","Charlesworth","Charter Bd BT","Charter BT","Chaucer","ChelthmITC Bk BT","Chiller","Clarendon","Clarendon Condensed","CloisterBlack BT","Cochin","Colonna MT","Constantia","Cooper Black","Copperplate","Copperplate Gothic","Copperplate Gothic Bold","Copperplate Gothic Light","CopperplGoth Bd BT","Corbel","Cordia New","CordiaUPC","Cornerstone","Coronet","Cuckoo","Curlz MT","DaunPenh","Dauphin","David","DB LCD Temp","DELICIOUS","Denmark","DFKai-SB","Didot","DilleniaUPC","DIN","DokChampa","Dotum","DotumChe","Ebrima","Edwardian Script ITC","Elephant","English 111 Vivace BT","Engravers MT","EngraversGothic BT","Eras Bold ITC","Eras Demi ITC","Eras Light ITC","Eras Medium ITC","EucrosiaUPC","Euphemia","Euphemia UCAS","EUROSTILE","Exotc350 Bd BT","FangSong","Felix Titling","Fixedsys","FONTIN","Footlight MT Light","Forte","FrankRuehl","Fransiscan","Freefrm721 Blk BT","FreesiaUPC","Freestyle Script","French Script MT","FrnkGothITC Bk BT","Fruitger","FRUTIGER","Futura","Futura Bk BT","Futura Lt BT","Futura Md BT","Futura ZBlk BT","FuturaBlack BT","Gabriola","Galliard BT","Gautami","Geeza Pro","Geometr231 BT","Geometr231 Hv BT","Geometr231 Lt BT","GeoSlab 703 Lt BT","GeoSlab 703 XBd BT","Gigi","Gill Sans","Gill Sans MT","Gill Sans MT Condensed","Gill Sans MT Ext Condensed Bold","Gill Sans Ultra Bold","Gill Sans Ultra Bold Condensed","Gisha","Gloucester MT Extra Condensed","GOTHAM","GOTHAM BOLD","Goudy Old Style","Goudy Stout","GoudyHandtooled BT","GoudyOLSt BT","Gujarati Sangam MN","Gulim","GulimChe","Gungsuh","GungsuhChe","Gurmukhi MN","Haettenschweiler","Harlow Solid Italic","Harrington","Heather","Heiti SC","Heiti TC","HELV","Herald","High Tower Text","Hiragino Kaku Gothic ProN","Hiragino Mincho ProN","Hoefler Text","Humanst 521 Cn BT","Humanst521 BT","Humanst521 Lt BT","Imprint MT Shadow","Incised901 Bd BT","Incised901 BT","Incised901 Lt BT","INCONSOLATA","Informal Roman","Informal011 BT","INTERSTATE","IrisUPC","Iskoola Pota","JasmineUPC","Jazz LET","Jenson","Jester","Jokerman","Juice ITC","Kabel Bk BT","Kabel Ult BT","Kailasa","KaiTi","Kalinga","Kannada Sangam MN","Kartika","Kaufmann Bd BT","Kaufmann BT","Khmer UI","KodchiangUPC","Kokila","Korinna BT","Kristen ITC","Krungthep","Kunstler Script","Lao UI","Latha","Leelawadee","Letter Gothic","Levenim MT","LilyUPC","Lithograph","Lithograph Light","Long Island","Lydian BT","Magneto","Maiandra GD","Malayalam Sangam MN","Malgun Gothic","Mangal","Marigold","Marion","Marker Felt","Market","Marlett","Matisse ITC","Matura MT Script Capitals","Meiryo","Meiryo UI","Microsoft Himalaya","Microsoft JhengHei","Microsoft New Tai Lue","Microsoft PhagsPa","Microsoft Tai Le","Microsoft Uighur","Microsoft YaHei","Microsoft Yi Baiti","MingLiU","MingLiU_HKSCS","MingLiU_HKSCS-ExtB","MingLiU-ExtB","Minion","Minion Pro","Miriam","Miriam Fixed","Mistral","Modern","Modern No. 20","Mona Lisa Solid ITC TT","Mongolian Baiti","MONO","MoolBoran","Mrs Eaves","MS LineDraw","MS Mincho","MS PMincho","MS Reference Specialty","MS UI Gothic","MT Extra","MUSEO","MV Boli","Nadeem","Narkisim","NEVIS","News Gothic","News GothicMT","NewsGoth BT","Niagara Engraved","Niagara Solid","Noteworthy","NSimSun","Nyala","OCR A Extended","Old Century","Old English Text MT","Onyx","Onyx BT","OPTIMA","Oriya Sangam MN","OSAKA","OzHandicraft BT","Palace Script MT","Papyrus","Parchment","Party LET","Pegasus","Perpetua","Perpetua Titling MT","PetitaBold","Pickwick","Plantagenet Cherokee","Playbill","PMingLiU","PMingLiU-ExtB","Poor Richard","Poster","PosterBodoni BT","PRINCETOWN LET","Pristina","PTBarnum BT","Pythagoras","Raavi","Rage Italic","Ravie","Ribbon131 Bd BT","Rockwell","Rockwell Condensed","Rockwell Extra Bold","Rod","Roman","Sakkal Majalla","Santa Fe LET","Savoye LET","Sceptre","Script","Script MT Bold","SCRIPTINA","Serifa","Serifa BT","Serifa Th BT","ShelleyVolante BT","Sherwood","Shonar Bangla","Showcard Gothic","Shruti","Signboard","SILKSCREEN","SimHei","Simplified Arabic","Simplified Arabic Fixed","SimSun","SimSun-ExtB","Sinhala Sangam MN","Sketch Rockwell","Skia","Small Fonts","Snap ITC","Snell Roundhand","Socket","Souvenir Lt BT","Staccato222 BT","Steamer","Stencil","Storybook","Styllo","Subway","Swis721 BlkEx BT","Swiss911 XCm BT","Sylfaen","Synchro LET","System","Tamil Sangam MN","Technical","Teletype","Telugu Sangam MN","Tempus Sans ITC","Terminal","Thonburi","Traditional Arabic","Trajan","TRAJAN PRO","Tristan","Tubular","Tunga","Tw Cen MT","Tw Cen MT Condensed","Tw Cen MT Condensed Extra Bold","TypoUpright BT","Unicorn","Univers","Univers CE 55 Medium","Univers Condensed","Utsaah","Vagabond","Vani","Vijaya","Viner Hand ITC","VisualUI","Vivaldi","Vladimir Script","Vrinda","Westminster","WHITNEY","Wide Latin","ZapfEllipt BT","ZapfHumnst BT","ZapfHumnst Dm BT","Zapfino","Zurich BlkEx BT","Zurich Ex BT","ZWAdobeF"])}r=(r=r.concat(t.fonts.userDefinedFonts)).filter(function(e,t){return r.indexOf(e)===t});var o=document.getElementsByTagName("body")[0],i=document.createElement("div"),a=document.createElement("div"),s={},u={},c=function(){var e=document.createElement("span");return e.style.position="absolute",e.style.left="-9999px",e.style.fontSize="72px",e.style.fontStyle="normal",e.style.fontWeight="normal",e.style.letterSpacing="normal",e.style.lineBreak="auto",e.style.lineHeight="normal",e.style.textTransform="none",e.style.textAlign="left",e.style.textDecoration="none",e.style.textShadow="none",e.style.whiteSpace="normal",e.style.wordBreak="normal",e.style.wordSpacing="normal",e.innerHTML="mmmmmmmmmmlli",e},l=function(e,t){var n=c();return n.style.fontFamily="'"+e+"',"+t,n},d=function(e){for(var t=!1,r=0;r<n.length;r++)if(t=e[r].offsetWidth!==s[n[r]]||e[r].offsetHeight!==u[n[r]])return t;return t},p=function(){for(var e=[],t=0,r=n.length;t<r;t++){var o=c();o.style.fontFamily=n[t],i.appendChild(o),e.push(o)}return e}();o.appendChild(i);for(var h=0,f=n.length;h<f;h++)s[n[h]]=p[h].offsetWidth,u[n[h]]=p[h].offsetHeight;var g=function(){for(var e={},t=0,o=r.length;t<o;t++){for(var i=[],s=0,u=n.length;s<u;s++){var c=l(r[t],n[s]);a.appendChild(c),i.push(c)}e[r[t]]=i}return e}();o.appendChild(a);for(var y=[],v=0,m=r.length;v<m;v++)d(g[r[v]])&&y.push(r[v]);o.removeChild(a),o.removeChild(i),e(y)},pauseBefore:!0},{key:"fontsFlash",getData:function(e,t){return N()?L()?t.fonts.swfPath?void M(function(t){e(t)},t):e("missing options.fonts.swfPath"):e("flash not installed"):e("swf object not loaded")},pauseBefore:!0},{key:"audio",getData:function(e,t){var n=t.audio;if(n.excludeIOS11&&navigator.userAgent.match(/OS 11.+Version\/11.+Safari/))return e(t.EXCLUDED);var r=window.OfflineAudioContext||window.webkitOfflineAudioContext;if(null==r)return e(t.NOT_AVAILABLE);var o=new r(1,44100,44100),i=o.createOscillator();i.type="triangle",i.frequency.setValueAtTime(1e4,o.currentTime);var a=o.createDynamicsCompressor();u([["threshold",-50],["knee",40],["ratio",12],["reduction",-20],["attack",0],["release",.25]],function(e){void 0!==a[e[0]]&&"function"==typeof a[e[0]].setValueAtTime&&a[e[0]].setValueAtTime(e[1],o.currentTime)}),i.connect(a),a.connect(o.destination),i.start(0),o.startRendering();var s=setTimeout(function(){return console.warn('Audio fingerprint timed out. Please report bug at https://github.com/Valve/fingerprintjs2 with your user agent: "'+navigator.userAgent+'".'),o.oncomplete=function(){},o=null,e("audioTimeout")},n.timeout);o.oncomplete=function(t){var n;try{clearTimeout(s),n=t.renderedBuffer.getChannelData(0).slice(4500,5e3).reduce(function(e,t){return e+Math.abs(t)},0).toString(),i.disconnect(),a.disconnect()}catch(t){return void e(t)}e(n)}}},{key:"enumerateDevices",getData:function(e,t){if(!l())return e(t.NOT_AVAILABLE);navigator.mediaDevices.enumerateDevices().then(function(t){e(t.map(function(e){return"id="+e.deviceId+";gid="+e.groupId+";"+e.kind+";"+e.label}))}).catch(function(t){e(t)})}}],W=function(e){throw new Error("'new Fingerprint()' is deprecated, see https://github.com/Valve/fingerprintjs2#upgrade-guide-from-182-to-200")};return W.get=function(e,t){t?e||(e={}):(t=e,e={}),function(e,t){if(null==t)return e;var n,r;for(r in t)null==(n=t[r])||Object.prototype.hasOwnProperty.call(e,r)||(e[r]=n)}(e,s),e.components=e.extraComponents.concat(U);var n={data:[],addPreprocessedComponent:function(t,r){"function"==typeof e.preprocessor&&(r=e.preprocessor(t,r)),n.data.push({key:t,value:r})}},r=-1,o=function(i){if((r+=1)>=e.components.length)t(n.data);else{var a=e.components[r];if(e.excludes[a.key])o(!1);else{if(!i&&a.pauseBefore)return r-=1,void setTimeout(function(){o(!0)},1);try{a.getData(function(e){n.addPreprocessedComponent(a.key,e),o(!1)},e)}catch(e){n.addPreprocessedComponent(a.key,String(e)),o(!1)}}}};o(!1)},W.getPromise=function(e){return new Promise(function(t,n){W.get(e,t)})},W.getV18=function(e,t){return null==t&&(t=e,e={}),W.get(e,function(n){for(var r=[],o=0;o<n.length;o++){var i=n[o];if(i.value===(e.NOT_AVAILABLE||"not available"))r.push({key:i.key,value:"unknown"});else if("plugins"===i.key)r.push({key:"plugins",value:c(i.value,function(e){var t=c(e[2],function(e){return e.join?e.join("~"):e}).join(",");return[e[0],e[1],t].join("::")})});else if(-1!==["canvas","webgl"].indexOf(i.key)&&Array.isArray(i.value))r.push({key:i.key,value:i.value.join("~")});else if(-1!==["sessionStorage","localStorage","indexedDb","addBehavior","openDatabase"].indexOf(i.key)){if(!i.value)continue;r.push({key:i.key,value:1})}else i.value?r.push(i.value.join?{key:i.key,value:i.value.join(";")}:i):r.push({key:i.key,value:i.value})}var s=a(c(r,function(e){return e.value}).join("~~~"),31);t(s,r)})},W.x64hash128=a,W.VERSION="2.1.2",W})},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.requestValidate=function(e){if("object"!=typeof e||Array.isArray(e))return!1;var t=this.validateUrl(e),n=this.validateEnv(e),r=this.validateRequest(e,"services"),o=this.validateEnvKey(e),i=this.validateNumberofservice(e);return t&&n&&r&&o&&i},e.prototype.validateUrl=function(e){var t=e.url.trim();return!(!e.hasOwnProperty("url")||""===t||"string"!=typeof t)},e.prototype.validateEnv=function(e){return!(!e.hasOwnProperty("envProps")||"object"!=typeof e.envProps||Array.isArray(e.envProps))},e.prototype.validateRequest=function(e,t){return!e.reqData||!e.reqData.hasOwnProperty(t)||"object"==typeof e.reqData[t]&&!Array.isArray(e.reqData[t])},e.prototype.validateEnvKey=function(e){return!!(e.envProps&&e.envProps.hasOwnProperty("envProps")&&e.envProps.envProps.hasOwnProperty("orgId")&&e.envProps.envProps.hasOwnProperty("appId")&&e.envProps.envProps.hasOwnProperty("secureKey")&&e.envProps.envProps.hasOwnProperty("appVersion"))&&("string"==typeof e.envProps.envProps.orgId&&"string"==typeof e.envProps.envProps.appId&&"string"==typeof e.envProps.envProps.appVersion&&!!(e.envProps.envProps.orgId&&e.envProps.envProps.appId&&e.envProps.envProps.appVersion))},e.prototype.validateNumberofservice=function(e){try{return!(Object.keys(e.reqData.services).length>5)}catch(e){}},e}();t.PrepareDataValidation=r},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(10),s=n(1),u=n(11),c=n(2),l=n(3),d=n(12),p=n(7),h=n(9),f=function(){function e(){this.security=new i.Security,this.platwareHeaderandBody=new a.PlatwareRequestModel,this.requestUtility=new s.RequestUtility,this.dateParsing=new u.DateParsing,this.validator=new h.Validators}return e.prototype.getRequestService=function(e){return r(this,void 0,void 0,function(){var t;return o(this,function(n){switch(n.label){case 0:return[4,this.requestUtility.fingerprint()];case 1:return t=n.sent(),this.requestProperty=new d.RequestProprty(e,t),this.setBodyInterfaceKeys(e),this.setHeaderInterfaceKeys(e),[4,this.setServiceHeaders(this.requestProperty.getCurrentDate,this.requestProperty.getFingerPrint,this.requestProperty.getServiceName,this.requestProperty.getEnvProp)];case 2:return n.sent(),[4,this.setServiceBody(this.requestProperty.getCurrentDate,this.requestProperty.getWindowNavigator,e,this.requestProperty.getFingerPrint,this.requestProperty.getEnvProp)];case 3:return n.sent(),[2,this.getPWRequest()]}})})},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var n in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[n]=t[n]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var n in t)this.platwareHeaderandBody.pwRequest.PWHeader[n]=t[n]},e.prototype.setServiceHeaders=function(e,t,n,i){return r(this,void 0,void 0,function(){var r,a,s,u,d;return o(this,function(o){switch(o.label){case 0:return r="",[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.JWTTOKEN))];case 1:return a=o.sent(),[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.AUTHJWTTOKEN))];case 2:if(s=o.sent())r=this.security.aesEncryption.getDecryption(JSON.parse(s),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey());else if(a)try{r=this.security.aesEncryption.getDecryption(JSON.parse(a),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())}catch(e){throw e}return this.platwareHeaderandBody.pwRequest.PWHeader.authorization=r,[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.LOGINID))];case 3:return u=o.sent(),d=u?JSON.parse(u):"--",this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid(d,t,e,i),this.setHeaderKeys(n,t,i,"ER_ER"),[2]}})})},e.prototype.setServiceBody=function(e,t,n,i,a){return r(this,void 0,void 0,function(){var r,s,u;return o(this,function(o){switch(o.label){case 0:return this.setInterface(e,t,i,a),this.platwareHeaderandBody.pwRequest.PWBody.services=n.reqData.services,[4,this.requestUtility.generateTxnKey(e,a)];case 1:return r=o.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.txnkey=r.b,s=this.security.aesEncryption.getEncryption(JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody),r.t),u={request:s},this.platwareHeaderandBody.pwRequest.temp=u,this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(u),r.t).toUpperCase(),this.platwareHeaderandBody.pwRequest.txnkey=r.t.toString(),[2]}})})},e.prototype.setHeaderKeys=function(e,t,n,r){this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(n),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=e,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=t,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=r},e.prototype.setInterface=function(e,t,n,r){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=n,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=r.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=r.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=r.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return r(this,void 0,void 0,function(){var e;return o(this,function(t){switch(t.label){case 0:return[4,this.validator.networkValidators.getDeviceId()];case 1:return e=t.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=e,[2,this.platwareHeaderandBody.pwRequest]}})})},e}();t.GatewayService=f},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(10),a=n(0),s=n(11),u=n(1),c=n(12),l=n(2),d=n(22),p=n(9),h=function(){function e(){this.security=new a.Security,this.platwareHeaderandBody=new i.PlatwareRequestModel,this.requestUtility=new u.RequestUtility,this.dateParsing=new s.DateParsing,this.apiType=new d.ApiType,this.validator=new p.Validators}return e.prototype.getAuthRequest=function(e){return r(this,void 0,void 0,function(){var t;return o(this,function(n){switch(n.label){case 0:return[4,this.requestUtility.fingerprint()];case 1:return t=n.sent(),this.requestProperty=new c.RequestProprty(e,t),this.setBodyInterfaceKeys(e),this.setHeaderInterfaceKeys(e),[4,this.setAuthHeaders(this.requestProperty.getNounce,e,this.requestProperty.getServiceName,this.requestProperty.getFingerPrint,this.requestProperty.getCurrentNounce,this.requestProperty.getCurrentDate,this.requestProperty.getEnvProp)];case 2:return n.sent(),[4,this.setAuthBody(this.requestProperty.getFingerPrint,this.requestProperty.getWindowNavigator,e,this.requestProperty.getCurrentDate,this.requestProperty.getEnvProp)];case 3:return n.sent(),[2,this.getPWRequest()]}})})},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var n in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[n]=t[n]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var n in t)this.platwareHeaderandBody.pwRequest.PWHeader[n]=t[n]},e.prototype.setAuthHeaders=function(e,t,n,i,a,s,u){return r(this,void 0,void 0,function(){var r,c,d,p,h,f,g;return o(this,function(o){switch(o.label){case 0:return r=t.reqData.services[n][0].id?t.reqData.services[n][0].id:"--",c=a.toString()+u.secureKey,d=c.substring(0,32),p=u.orgId+"~"+u.appId+"~"+r+"~"+i+":user:"+a,h=this.security.aesEncryption.getEncryption(p,d),this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid(r,i,s,u),this.platwareHeaderandBody.pwRequest.PWHeader.authorization="Basic "+h,this.platwareHeaderandBody.pwRequest.PWHeader.nounce=e,this.setHeaderKeys(n,i,u,"ER_ER"),[4,l.Storage.getInstance().getItemValue(this.requestUtility.makeKey("forceLogin"))];case 1:return f=o.sent(),"Y"===(g=f||"")&&(this.platwareHeaderandBody.pwRequest.PWHeader.isforcelogin=g),this.platwareHeaderandBody.pwRequest.loginId=r,[2]}})})},e.prototype.setAuthBody=function(e,t,n,i,a){return r(this,void 0,void 0,function(){var r,s,u;return o(this,function(o){switch(o.label){case 0:return this.setInterface(i,t,e,a),this.platwareHeaderandBody.pwRequest.PWBody.services=n.reqData.services,[4,this.requestUtility.generateTxnKey(i,a)];case 1:return r=o.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.txnkey=r.b,s=this.security.aesEncryption.getEncryption(JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody),r.t),u={request:s},this.platwareHeaderandBody.pwRequest.temp=u,this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(u),r.t).toUpperCase(),this.platwareHeaderandBody.pwRequest.txnkey=r.t.toString(),[2]}})})},e.prototype.setHeaderKeys=function(e,t,n,i){return r(this,void 0,void 0,function(){return o(this,function(r){return this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(n),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=e,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=t,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=i,[2]})})},e.prototype.setInterface=function(e,t,n,r){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=n,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=r.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=r.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=r.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return r(this,void 0,void 0,function(){var e;return o(this,function(t){switch(t.label){case 0:return[4,this.validator.networkValidators.getDeviceId()];case 1:return e=t.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=e,[2,this.platwareHeaderandBody.pwRequest]}})})},e}();t.AuthService=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=function(){function e(){this.data={envProps:{},body:{},header:{},reqData:{interfaces:{},services:{}},url:""}}return e.prototype.setapiType=function(e){this.apiType=e},e.prototype.getapiType=function(){return this.apiType},e.prototype.mapToPlatwareRequest=function(e,t){return this.data.envProps=r.EnvironmentStore.getInstance().getEnvironment(),this.data.header=t,this.data.body=e,this.setServiceKeys(),this.setDataUrl(),this.data},e.prototype.setDataUrl=function(){this.data.envProps.hasOwnProperty("isAuth")?this.data.url=this.setAuthUrl(this.data.body):this.data.url=this.setUrl(this.data.body)},e.prototype.setServiceKeys=function(){for(var e in this.data.body)this.data.reqData.services[e]=this.data.body[e]},e.prototype.setUrl=function(e){for(var t in e)return"LOGOUT"===t?(this.data.url=this.getUrl("logout"),this.data.url):"AUTH_VAHANA"===t||"AUTH"===t||"VAHANA_AUTHENTICATION"===t?(this.data.url=this.getUrl("auth"),this.setapiType(t),this.data.url):(this.data.url=this.getUrl(""),this.data.url)},e.prototype.getUrl=function(e){switch(e){case"auth":return"/register";case"logout":return"/logout";default:return"/gateway"}},e.prototype.setAuthUrl=function(e){for(var t in e)return this.data.url=this.getUrl("auth"),this.setapiType(t),this.data.url},e}();t.PrepareRequest=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=function(){function e(){}return e.prototype.mapToPlatwareRequestEndPoint=function(e,t,n){var o={envProps:{},body:{},header:{},reqData:{interfaces:{},requestData:{}},url:""};return o.envProps=r.EnvironmentStore.getInstance().getEnvironment(),o.header=t,o.body=e,o.reqData.requestData=e,o.url=n,o},e}();t.PrepareRequestForEndPoint=o},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(10),s=n(1),u=n(11),c=n(2),l=n(3),d=n(12),p=n(7),h=n(9),f=function(){function e(){this.security=new i.Security,this.platwareHeaderandBody=new a.PlatwareRequestModel,this.requestUtility=new s.RequestUtility,this.dateParsing=new u.DateParsing,this.validator=new h.Validators}return e.prototype.getRequestService=function(e){return r(this,void 0,void 0,function(){var t;return o(this,function(n){switch(n.label){case 0:return[4,this.requestUtility.fingerprint()];case 1:return t=n.sent(),this.requestProperty=new d.RequestProprty(e,t),this.setBodyInterfaceKeys(e),this.setHeaderInterfaceKeys(e),[4,this.setServiceHeaders(e,this.requestProperty.getCurrentDate,this.requestProperty.getFingerPrint,this.requestProperty.getServiceName,this.requestProperty.getEnvProp)];case 2:return n.sent(),[4,this.setServiceBody(this.requestProperty.getCurrentDate,this.requestProperty.getWindowNavigator,e,this.requestProperty.getFingerPrint,this.requestProperty.getEnvProp)];case 3:return n.sent(),[2,this.getPWRequest()]}})})},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var n in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[n]=t[n]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var n in t)this.platwareHeaderandBody.pwRequest.PWHeader[n]=t[n]},e.prototype.setServiceHeaders=function(e,t,n,i,a){return r(this,void 0,void 0,function(){var r,s,u,d,h;return o(this,function(o){switch(o.label){case 0:return r="",[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.JWTTOKEN))];case 1:return s=o.sent(),[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.AUTHJWTTOKEN))];case 2:if(u=o.sent())r=this.security.aesEncryption.getDecryption(JSON.parse(u),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey());else if(s)try{r=this.security.aesEncryption.getDecryption(JSON.parse(s),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())}catch(e){throw e}return this.platwareHeaderandBody.pwRequest.PWHeader.authorization=r,[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.LOGINID))];case 3:return d=o.sent(),h=d||"--",this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid(h,n,t,a),this.setHeaderKeys(e,i,n,a,"ER_ER"),[2]}})})},e.prototype.setServiceBody=function(e,t,n,i,a){return r(this,void 0,void 0,function(){var r,s,u,c,l,d,p,h,f;return o(this,function(o){switch(o.label){case 0:return this.setInterface(e,t,i,a),[4,this.requestUtility.generateTxnKey(e,a)];case 1:if(r=o.sent(),delete this.platwareHeaderandBody.pwRequest.PWBody.services,n.reqData.requestData instanceof FormData){for(s=new FormData,u=0,c=Array.from(n.reqData.requestData.entries());u<c.length;u++)l=c[u],s.append(l[0],l[1]);n.reqData.requestData=s,n.reqData.requestData.append("interfaces",JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody.interfaces)),d=JSON.stringify(n.reqData.requestData),p=this.security.aesEncryption.getEncryption(d,r.t),f={request:p},n.reqData.requestData.append("request",JSON.stringify(f)),this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(f),r.t).toUpperCase(),this.platwareHeaderandBody.pwRequest.temp=n.reqData.requestData}else this.platwareHeaderandBody.pwRequest.PWBody.requestData=n.reqData.requestData,h=this.security.aesEncryption.getEncryption(JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody),r.t),f={request:h},this.platwareHeaderandBody.pwRequest.temp=f,this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(f),r.t).toUpperCase();return this.platwareHeaderandBody.pwRequest.txnkey=r.t.toString(),this.platwareHeaderandBody.pwRequest.PWHeader.txnkey=r.b,[2]}})})},e.prototype.setHeaderKeys=function(e,t,n,r,o){this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(r),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=t||e.header.apiname,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=n,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=o},e.prototype.setInterface=function(e,t,n,r){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=n,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=r.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=r.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=r.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return r(this,void 0,void 0,function(){var e;return o(this,function(t){switch(t.label){case 0:return[4,this.validator.networkValidators.getDeviceId()];case 1:return e=t.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=e,[2,this.platwareHeaderandBody.pwRequest]}})})},e}();t.EndPointService=f},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(3),s=n(1),u=n(2),c=n(8),l=n(5),d=n(13),p=n(6),h=n(7),f=function(){function e(){this.security=new i.Security,this.requestUtility=new s.RequestUtility,this.serviceController=new d.ServiceController}return e.prototype.readResponse=function(e,t,n,i,s){return r(this,void 0,void 0,function(){var e,r,u,c;return o(this,function(o){switch(o.label){case 0:"function"==typeof t.get?this.authKey=t.get("Authorization"):this.authKey=t.authKey,o.label=1;case 1:return o.trys.push([1,4,,5]),u=(r=JSON).parse,[4,this.security.aesEncryption.getDecryption(i.body.response,s)];case 2:return e=u.apply(r,[o.sent()]),[4,this.requestUtility.userCredentials(n,this.authKey,a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())];case 3:return o.sent(),c=Object.keys(e.services)[0],[2,p.UserResponse.mapAPIResponse(!0,e.services[c].records[0].data[0].auth)];case 4:return o.sent(),[3,5];case 5:return[2]}})})},e.prototype.authErrorHandle=function(e,t,n){return r(this,void 0,void 0,function(){var r,i,a,s,d,f;return o(this,function(o){switch(o.label){case 0:if("Login Failed"===e)throw p.UserResponse.mapAPIResponse(!1,t,"PW-0003");return[4,u.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.REGISTERATIONFAIL))];case 1:return null!==o.sent()?[3,2]:(i=!1,[3,4]);case 2:return[4,u.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.REGISTERATIONFAIL))];case 3:i=o.sent(),o.label=4;case 4:if(r=i,"LOGOUT"!==e||"625"!==t.status)return[3,5];try{throw this.requestUtility.clearCreds(),p.UserResponse.mapAPIResponse(!0,t,"PW-0002")}catch(e){throw d=c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE),p.UserResponse.mapAPIResponse(!1,d,d.code)}return[3,14];case 5:return"REGISTERAPP"===e&&"401"===t.status||"627"===t.status||"537"===t.status?r?[3,7]:(this.requestUtility.clearCredsAll(),u.Storage.getInstance().setItem(this.requestUtility.makeKey(h.StorageConstant.REGISTERATIONFAIL),!0),[4,this.serviceController.doAuth(n)]):[3,9];case 6:return[2,o.sent()];case 7:throw this.requestUtility.clearCredsAll(),a=c.ErrorHandler.getErrors(l.ErrorConstant.REGISTRATIONFAILED),p.UserResponse.mapAPIResponse(!1,a,a.code);case 8:return[3,14];case 9:return"621"!==t.status?[3,13]:confirm("You are already logged in. Do you want to kill existing session?")?(!!n.hasOwnProperty("header")?n.header.isforcelogin="Y":(n.header={},n.header.isforcelogin="Y"),[4,this.serviceController.doAuth(n)]):[3,11];case 10:return[2,o.sent()];case 11:throw s=c.ErrorHandler.getErrors(l.ErrorConstant.DUPLICATESESSION),p.UserResponse.mapAPIResponse(!1,s,s.code);case 12:return[3,14];case 13:if("402"===t.status||"622"===t.status||"628"===t.status||"528"===t.status){this.requestUtility.clearCreds();try{throw p.UserResponse.mapAPIResponse(!1,t,"PW-0002")}catch(e){throw c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE)}}else if("Login Failed"===e||0!==t.status)try{throw p.UserResponse.mapAPIResponse(!1,t,"PW-0003")}catch(e){throw d=c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE),p.UserResponse.mapAPIResponse(!1,d,d.code)}else try{throw p.UserResponse.mapAPIResponse(!1,t,t.status)}catch(e){throw f=c.ErrorHandler.getErrors(l.ErrorConstant.UNKNOWN),p.UserResponse.mapAPIResponse(!1,f,f.code)}o.label=14;case 14:return[2]}})})},e}();t.AuthResponseHandler=f},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(3),s=n(1),u=n(2),c=n(8),l=n(5),d=n(6),p=n(7),h=function(){function e(){this.security=new i.Security,this.requestUtility=new s.RequestUtility}return e.prototype.readResponse=function(e,t){return r(this,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return"function"==typeof t.get?this.authKey=t.get("Authorization"):this.authKey=t.authKey,this.jwtToken=this.getJwtToken(this.authKey),this.rsaJson=this.getRsaData(e),[4,this.requestUtility.authCredentials(this.rsaJson,a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey(),this.jwtToken)];case 1:return[2,n.sent()]}})})},e.prototype.getJwtToken=function(e){return this.security.aesEncryption.getEncryption(e,a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())},e.prototype.getRsaData=function(e){return JSON.parse(e.services.REGISTERAPP.records[0].data[0].rsa)},e.prototype.registrationErrorHandle=function(e,t,n){return r(this,void 0,void 0,function(){var r,i,a,s,h;return o(this,function(o){switch(o.label){case 0:return[4,u.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.REGISTERATIONFAIL))];case 1:return r=o.sent(),i=r||!1,"REGISTERAPP"===e&&"401"===t.status||"627"===t.status||"537"===t.status?i?[3,3]:(this.requestUtility.clearCredsAll(),u.Storage.getInstance().setItem(this.requestUtility.makeKey(p.StorageConstant.REGISTERATIONFAIL),!0),[4,this.serviceController.doRegister(n)]):[3,5];case 2:return[2,o.sent()];case 3:throw this.requestUtility.clearCredsAll(),u.Storage.getInstance().clear(this.requestUtility.makeKey(p.StorageConstant.REGISTERATIONFAIL)),a=c.ErrorHandler.getErrors(l.ErrorConstant.REGISTRATIONFAILED),d.UserResponse.mapAPIResponse(!1,a,a.code);case 4:return[3,6];case 5:if(0===t.status)throw h=c.ErrorHandler.getErrors(l.ErrorConstant.UNKNOWN),d.UserResponse.mapAPIResponse(!1,h,h.code);try{throw d.UserResponse.mapAPIResponse(!1,t,"PW-0003")}catch(e){throw"500"===e.servercode?e:(s=c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE),d.UserResponse.mapAPIResponse(!1,s,s.code))}o.label=6;case 6:return[2]}})})},e}();t.RegistrationResponseHandler=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.controllerConst={DMS:{basePoint:"/DMS/execution",uploadStartPoint:"/upload-gateway",fetchForDocument:"/fetch/document",fetchForFolder:"/fetch/folder",upload:"/upload",downloadUrl:"/download/file",deleteFile:"/delete",deleteFileId:"/delete/file",fetchByStorageId:"/dmsconfig/admin/get/dmsClientDetails",uploadMetaData:"/update/metadata",updateFileMetaData:"/update/files/metadata",updateDocument:"/update/document",docAndFile:"/fetch/byrefId",fetchByFileId:"/fetch/file",listingData:"/fetch/path",document:"document",file:"file",FILE:"FILE",DOCUMENT:"DOCUMENT"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.filterResponse=function(e){var t=this;return new Promise(function(n,r){"object"==typeof e.data?t.responseHandler(e,t.getServiceName(e.data),n,r):!0===e.status?n(e):r(e)})},e.prototype.getServiceName=function(e){if(e)return delete e.status,Object.keys(e)},e.prototype.responseHandler=function(e,t,n,r){e.status?this.dataHandler(e.data,t,n,r):r(e)},e.prototype.dataHandler=function(e,t,n,r){var o={};for(var i in t)for(var a in e)a===t[i]&&(e[a][0].hasOwnProperty("data")?(o[a]=e[a][0].data[0].response||e[a][0].data[0],n(o)):(o[a]=e[a][0].error,r(o)))},e}();t.FilterResponse=r}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,